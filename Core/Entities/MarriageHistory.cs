// The source file: MARRIAGE_HISTORY, ID: 371437113, model: 746.
using System;
using System.ComponentModel;
using System.Text.Json.Serialization;
using Bphx.Cool;

using static Bphx.Cool.Functions;

namespace Gov.Kansas.DCF.Cse.Entities;

/// <summary>
/// RESP: OBLGESTB
/// Previous or current marriage information on  CSE APs and ARs.  The 
/// information for the (optional) marriage which produced the child is not
/// included here.
/// FED REQ: B-2.a.3
/// </summary>
[Serializable]
public partial class MarriageHistory: View, ICloneable
{
  /// <summary>Default constructor.</summary>
  public MarriageHistory()
  {
  }

  /// <summary>Copy constructor.</summary>
  /// <param name="that">An instance to copy.</param>
  public MarriageHistory(MarriageHistory that)
  {
    Init(that);
    Assign(that);
  }

  /// <summary>Creates a copy of this object.</summary>
  /// <returns>A copy of this instance.</returns>
  public new MarriageHistory Clone() => new(this);

  /// <summary>Creates a copy of this object.</summary>
  /// <returns>A copy of this instance.</returns>
  object ICloneable.Clone() => Clone();

  /// <summary>Assigns value from another instance.</summary>
  /// <param name="that">Another instance.</param>
  public void Assign(MarriageHistory that)
  {
    base.Assign(that);
    identifier = that.identifier;
    divorceCity = that.divorceCity;
    marriageCertificateCity = that.marriageCertificateCity;
    divorceCourtOrderNumber = that.divorceCourtOrderNumber;
    divorcePetitionDate = that.divorcePetitionDate;
    marriageCertificateState = that.marriageCertificateState;
    marriageCountry = that.marriageCountry;
    divorcePendingInd = that.divorcePendingInd;
    divorceCounty = that.divorceCounty;
    divorceState = that.divorceState;
    divorceCountry = that.divorceCountry;
    marriageCertificateCounty = that.marriageCertificateCounty;
    divorceDate = that.divorceDate;
    separationDate = that.separationDate;
    marriageDate = that.marriageDate;
    createdBy = that.createdBy;
    createdTimestamp = that.createdTimestamp;
    lastUpdatedBy = that.lastUpdatedBy;
    lastUpdatedTimestamp = that.lastUpdatedTimestamp;
    conINumber = that.conINumber;
    cspINumber = that.cspINumber;
    cspRNumber = that.cspRNumber;
    cspNumber = that.cspNumber;
  }

  /// <summary>
  /// The value of the IDENTIFIER attribute.
  /// This is a sequence number automatically generated by the system starting 
  /// from 1 thru 999 for a particular CSE Person's marriage history records.
  /// This attribute together with relation to CSE_PERSON uniquely identifies a
  /// MARRIAGE_HISTORY record.
  /// </summary>
  [JsonPropertyName("identifier")]
  [DefaultValue(0)]
  [Member(Index = 1, Type = MemberType.Number, Length = 3)]
  public int Identifier
  {
    get => identifier;
    set => identifier = value;
  }

  /// <summary>Length of the DIVORCE_CITY attribute.</summary>
  public const int DivorceCity_MaxLength = 15;

  /// <summary>
  /// The value of the DIVORCE_CITY attribute.
  /// The city where divorce took place.
  /// </summary>
  [JsonPropertyName("divorceCity")]
  [Member(Index = 2, Type = MemberType.Char, Length = DivorceCity_MaxLength, Optional
    = true)]
  public string DivorceCity
  {
    get => divorceCity;
    set => divorceCity = value != null
      ? TrimEnd(Substring(value, 1, DivorceCity_MaxLength)) : null;
  }

  /// <summary>Length of the MARRIAGE_CERTIFICATE_CITY attribute.</summary>
  public const int MarriageCertificateCity_MaxLength = 15;

  /// <summary>
  /// The value of the MARRIAGE_CERTIFICATE_CITY attribute.
  /// The city where marriage took place.
  /// </summary>
  [JsonPropertyName("marriageCertificateCity")]
  [Member(Index = 3, Type = MemberType.Char, Length
    = MarriageCertificateCity_MaxLength, Optional = true)]
  public string MarriageCertificateCity
  {
    get => marriageCertificateCity;
    set => marriageCertificateCity = value != null
      ? TrimEnd(Substring(value, 1, MarriageCertificateCity_MaxLength)) : null;
  }

  /// <summary>Length of the DIVORCE_COURT_ORDER_NUMBER attribute.</summary>
  public const int DivorceCourtOrderNumber_MaxLength = 15;

  /// <summary>
  /// The value of the DIVORCE_COURT_ORDER_NUMBER attribute.
  /// The court case number that relates to the divorce.
  /// </summary>
  [JsonPropertyName("divorceCourtOrderNumber")]
  [Member(Index = 4, Type = MemberType.Char, Length
    = DivorceCourtOrderNumber_MaxLength, Optional = true)]
  public string DivorceCourtOrderNumber
  {
    get => divorceCourtOrderNumber;
    set => divorceCourtOrderNumber = value != null
      ? TrimEnd(Substring(value, 1, DivorceCourtOrderNumber_MaxLength)) : null;
  }

  /// <summary>
  /// The value of the DIVORCE_PETITION_DATE attribute.
  /// The date a petition for divorce was filed in court.
  /// </summary>
  [JsonPropertyName("divorcePetitionDate")]
  [Member(Index = 5, Type = MemberType.Date, Optional = true)]
  public DateTime? DivorcePetitionDate
  {
    get => divorcePetitionDate;
    set => divorcePetitionDate = value;
  }

  /// <summary>Length of the MARRIAGE_CERTIFICATE_STATE attribute.</summary>
  public const int MarriageCertificateState_MaxLength = 2;

  /// <summary>
  /// The value of the MARRIAGE_CERTIFICATE_STATE attribute.
  /// The state in which the marriage license for a CSE Person was issued.
  /// </summary>
  [JsonPropertyName("marriageCertificateState")]
  [Member(Index = 6, Type = MemberType.Char, Length
    = MarriageCertificateState_MaxLength, Optional = true)]
  public string MarriageCertificateState
  {
    get => marriageCertificateState;
    set => marriageCertificateState = value != null
      ? TrimEnd(Substring(value, 1, MarriageCertificateState_MaxLength)) : null
      ;
  }

  /// <summary>Length of the MARRIAGE_COUNTRY attribute.</summary>
  public const int MarriageCountry_MaxLength = 2;

  /// <summary>
  /// The value of the MARRIAGE_COUNTRY attribute.
  /// Marriage country code. The description for the country code is kept in 
  /// CODE_VALUE table (code_name=&quot;COUNTRY&quot;)
  /// </summary>
  [JsonPropertyName("marriageCountry")]
  [Member(Index = 7, Type = MemberType.Char, Length
    = MarriageCountry_MaxLength, Optional = true)]
  public string MarriageCountry
  {
    get => marriageCountry;
    set => marriageCountry = value != null
      ? TrimEnd(Substring(value, 1, MarriageCountry_MaxLength)) : null;
  }

  /// <summary>Length of the DIVORCE_PENDING_IND attribute.</summary>
  public const int DivorcePendingInd_MaxLength = 1;

  /// <summary>
  /// The value of the DIVORCE_PENDING_IND attribute.
  /// Yes or No indicator stating whether or not a civorce is still pending at 
  /// the court.
  /// </summary>
  [JsonPropertyName("divorcePendingInd")]
  [Member(Index = 8, Type = MemberType.Char, Length
    = DivorcePendingInd_MaxLength, Optional = true)]
  public string DivorcePendingInd
  {
    get => divorcePendingInd;
    set => divorcePendingInd = value != null
      ? TrimEnd(Substring(value, 1, DivorcePendingInd_MaxLength)) : null;
  }

  /// <summary>Length of the DIVORCE_COUNTY attribute.</summary>
  public const int DivorceCounty_MaxLength = 15;

  /// <summary>
  /// The value of the DIVORCE_COUNTY attribute.
  /// The name of the county in which the divorce of the CSE Person was granted.
  /// It is not a code.
  /// </summary>
  [JsonPropertyName("divorceCounty")]
  [Member(Index = 9, Type = MemberType.Char, Length = DivorceCounty_MaxLength, Optional
    = true)]
  public string DivorceCounty
  {
    get => divorceCounty;
    set => divorceCounty = value != null
      ? TrimEnd(Substring(value, 1, DivorceCounty_MaxLength)) : null;
  }

  /// <summary>Length of the DIVORCE_STATE attribute.</summary>
  public const int DivorceState_MaxLength = 2;

  /// <summary>
  /// The value of the DIVORCE_STATE attribute.
  /// The state in which the divorce of the CSE Person was granted.
  /// </summary>
  [JsonPropertyName("divorceState")]
  [Member(Index = 10, Type = MemberType.Char, Length = DivorceState_MaxLength, Optional
    = true)]
  public string DivorceState
  {
    get => divorceState;
    set => divorceState = value != null
      ? TrimEnd(Substring(value, 1, DivorceState_MaxLength)) : null;
  }

  /// <summary>Length of the DIVORCE_COUNTRY attribute.</summary>
  public const int DivorceCountry_MaxLength = 2;

  /// <summary>
  /// The value of the DIVORCE_COUNTRY attribute.
  /// Divorce country code. The value and description for the code is kept in 
  /// CODE_TABLE. (code_name=&quot;COUNTRY&quot;)
  /// </summary>
  [JsonPropertyName("divorceCountry")]
  [Member(Index = 11, Type = MemberType.Char, Length
    = DivorceCountry_MaxLength, Optional = true)]
  public string DivorceCountry
  {
    get => divorceCountry;
    set => divorceCountry = value != null
      ? TrimEnd(Substring(value, 1, DivorceCountry_MaxLength)) : null;
  }

  /// <summary>Length of the MARRIAGE_CERTIFICATE_COUNTY attribute.</summary>
  public const int MarriageCertificateCounty_MaxLength = 15;

  /// <summary>
  /// The value of the MARRIAGE_CERTIFICATE_COUNTY attribute.
  /// The name of the county in which the marriage license for a CSE Person was 
  /// issued. It is not a code.
  /// </summary>
  [JsonPropertyName("marriageCertificateCounty")]
  [Member(Index = 12, Type = MemberType.Char, Length
    = MarriageCertificateCounty_MaxLength, Optional = true)]
  public string MarriageCertificateCounty
  {
    get => marriageCertificateCounty;
    set => marriageCertificateCounty = value != null
      ? TrimEnd(Substring(value, 1, MarriageCertificateCounty_MaxLength)) : null
      ;
  }

  /// <summary>
  /// The value of the DIVORCE_DATE attribute.
  /// The date when the divorce of the CSE Person was granted.
  /// </summary>
  [JsonPropertyName("divorceDate")]
  [Member(Index = 13, Type = MemberType.Date, Optional = true)]
  public DateTime? DivorceDate
  {
    get => divorceDate;
    set => divorceDate = value;
  }

  /// <summary>
  /// The value of the SEPARATION_DATE attribute.
  /// The date chosen by a CSE Person to separate into different living quarters
  /// from their spouse, whether legal or common-law.
  /// May not need this date-only care about the legal date which is attached to
  /// an order.
  /// </summary>
  [JsonPropertyName("separationDate")]
  [Member(Index = 14, Type = MemberType.Date, Optional = true)]
  public DateTime? SeparationDate
  {
    get => separationDate;
    set => separationDate = value;
  }

  /// <summary>
  /// The value of the MARRIAGE_DATE attribute.
  /// The date when the marriage certificate is signed by the CSE Person.
  /// </summary>
  [JsonPropertyName("marriageDate")]
  [Member(Index = 15, Type = MemberType.Date, Optional = true)]
  public DateTime? MarriageDate
  {
    get => marriageDate;
    set => marriageDate = value;
  }

  /// <summary>Length of the CREATED_BY attribute.</summary>
  public const int CreatedBy_MaxLength = 8;

  /// <summary>
  /// The value of the CREATED_BY attribute.
  /// User ID or Program ID responsible for creation of the occurrence.
  /// </summary>
  [JsonIgnore]
  [DefaultValue("")]
  [Member(Index = 16, Type = MemberType.Char, Length = CreatedBy_MaxLength)]
  public string CreatedBy
  {
    get => createdBy ?? "";
    set => createdBy = TrimEnd(Substring(value, 1, CreatedBy_MaxLength));
  }

  /// <summary>
  /// The json value of the CreatedBy attribute.</summary>
  [JsonPropertyName("createdBy")]
  [Computed]
  public string CreatedBy_Json
  {
    get => NullIf(CreatedBy, "");
    set => CreatedBy = value;
  }

  /// <summary>
  /// The value of the CREATED_TIMESTAMP attribute.
  /// Timestamp of creation of the occurrence.
  /// </summary>
  [JsonPropertyName("createdTimestamp")]
  [Member(Index = 17, Type = MemberType.Timestamp)]
  public DateTime? CreatedTimestamp
  {
    get => createdTimestamp;
    set => createdTimestamp = value;
  }

  /// <summary>Length of the LAST_UPDATED_BY attribute.</summary>
  public const int LastUpdatedBy_MaxLength = 8;

  /// <summary>
  /// The value of the LAST_UPDATED_BY attribute.
  /// User ID or Program ID responsible for the last update of the occurrence.
  /// </summary>
  [JsonIgnore]
  [DefaultValue("")]
  [Member(Index = 18, Type = MemberType.Char, Length = LastUpdatedBy_MaxLength)]
  public string LastUpdatedBy
  {
    get => lastUpdatedBy ?? "";
    set => lastUpdatedBy =
      TrimEnd(Substring(value, 1, LastUpdatedBy_MaxLength));
  }

  /// <summary>
  /// The json value of the LastUpdatedBy attribute.</summary>
  [JsonPropertyName("lastUpdatedBy")]
  [Computed]
  public string LastUpdatedBy_Json
  {
    get => NullIf(LastUpdatedBy, "");
    set => LastUpdatedBy = value;
  }

  /// <summary>
  /// The value of the LAST_UPDATED_TIMESTAMP attribute.
  /// Timestamp of last update of the occurrence.
  /// </summary>
  [JsonPropertyName("lastUpdatedTimestamp")]
  [Member(Index = 19, Type = MemberType.Timestamp)]
  public DateTime? LastUpdatedTimestamp
  {
    get => lastUpdatedTimestamp;
    set => lastUpdatedTimestamp = value;
  }

  /// <summary>
  /// The value of the CONTACT_NUMBER attribute.
  /// Identifier that indicates a particular CSE contact person.
  /// </summary>
  [JsonPropertyName("conINumber")]
  [Member(Index = 20, Type = MemberType.Number, Length = 2, Optional = true)]
  public int? ConINumber
  {
    get => conINumber;
    set => conINumber = value;
  }

  /// <summary>Length of the NUMBER attribute.</summary>
  public const int CspINumber_MaxLength = 10;

  /// <summary>
  /// The value of the NUMBER attribute.
  /// This is a system generated number which will be used by the users to 
  /// identify a person.  This will have a business meaning, but will be unique
  /// </summary>
  [JsonPropertyName("cspINumber")]
  [Member(Index = 21, Type = MemberType.Char, Length = CspINumber_MaxLength, Optional
    = true)]
  public string CspINumber
  {
    get => cspINumber;
    set => cspINumber = value != null
      ? TrimEnd(Substring(value, 1, CspINumber_MaxLength)) : null;
  }

  /// <summary>Length of the NUMBER attribute.</summary>
  public const int CspRNumber_MaxLength = 10;

  /// <summary>
  /// The value of the NUMBER attribute.
  /// This is a system generated number which will be used by the users to 
  /// identify a person.  This will have a business meaning, but will be unique
  /// </summary>
  [JsonIgnore]
  [DefaultValue("")]
  [Member(Index = 22, Type = MemberType.Char, Length = CspRNumber_MaxLength)]
  public string CspRNumber
  {
    get => cspRNumber ?? "";
    set => cspRNumber = TrimEnd(Substring(value, 1, CspRNumber_MaxLength));
  }

  /// <summary>
  /// The json value of the CspRNumber attribute.</summary>
  [JsonPropertyName("cspRNumber")]
  [Computed]
  public string CspRNumber_Json
  {
    get => NullIf(CspRNumber, "");
    set => CspRNumber = value;
  }

  /// <summary>Length of the NUMBER attribute.</summary>
  public const int CspNumber_MaxLength = 10;

  /// <summary>
  /// The value of the NUMBER attribute.
  /// This is a system generated number which will be used by the users to 
  /// identify a person.  This will have a business meaning, but will be unique
  /// </summary>
  [JsonPropertyName("cspNumber")]
  [Member(Index = 23, Type = MemberType.Char, Length = CspNumber_MaxLength, Optional
    = true)]
  public string CspNumber
  {
    get => cspNumber;
    set => cspNumber = value != null
      ? TrimEnd(Substring(value, 1, CspNumber_MaxLength)) : null;
  }

  private int identifier;
  private string divorceCity;
  private string marriageCertificateCity;
  private string divorceCourtOrderNumber;
  private DateTime? divorcePetitionDate;
  private string marriageCertificateState;
  private string marriageCountry;
  private string divorcePendingInd;
  private string divorceCounty;
  private string divorceState;
  private string divorceCountry;
  private string marriageCertificateCounty;
  private DateTime? divorceDate;
  private DateTime? separationDate;
  private DateTime? marriageDate;
  private string createdBy;
  private DateTime? createdTimestamp;
  private string lastUpdatedBy;
  private DateTime? lastUpdatedTimestamp;
  private int? conINumber;
  private string cspINumber;
  private string cspRNumber;
  private string cspNumber;
}
