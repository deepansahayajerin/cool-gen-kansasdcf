// The source file: TRIBUNAL, ID: 371440361, model: 746.
using System;
using System.ComponentModel;
using System.Text.Json.Serialization;
using Bphx.Cool;

using static Bphx.Cool.Functions;

namespace Gov.Kansas.DCF.Cse.Entities;

/// <summary>
/// RESP: LGLENFAC
/// A court, administrative agency, or quasi-judicial entity authorized to 
/// establish, enforce, or modify support orders or to determine parentage.
/// </summary>
[Serializable]
public partial class Tribunal: View, ICloneable
{
  /// <summary>Default constructor.</summary>
  public Tribunal()
  {
  }

  /// <summary>Copy constructor.</summary>
  /// <param name="that">An instance to copy.</param>
  public Tribunal(Tribunal that)
  {
    Init(that);
    Assign(that);
  }

  /// <summary>Creates a copy of this object.</summary>
  /// <returns>A copy of this instance.</returns>
  public new Tribunal Clone() => new(this);

  /// <summary>Creates a copy of this object.</summary>
  /// <returns>A copy of this instance.</returns>
  object ICloneable.Clone() => Clone();

  /// <summary>Assigns value from another instance.</summary>
  /// <param name="that">Another instance.</param>
  public void Assign(Tribunal that)
  {
    base.Assign(that);
    taxIdSuffix = that.taxIdSuffix;
    taxId = that.taxId;
    identifier = that.identifier;
    name = that.name;
    judicialDistrict = that.judicialDistrict;
    judicialDivision = that.judicialDivision;
    createdBy = that.createdBy;
    createdTstamp = that.createdTstamp;
    lastUpdatedBy = that.lastUpdatedBy;
    lastUpdatedTstamp = that.lastUpdatedTstamp;
    documentHeader1 = that.documentHeader1;
    documentHeader2 = that.documentHeader2;
    documentHeader3 = that.documentHeader3;
    documentHeader4 = that.documentHeader4;
    documentHeader5 = that.documentHeader5;
    documentHeader6 = that.documentHeader6;
    fipLocation = that.fipLocation;
    fipCounty = that.fipCounty;
    fipState = that.fipState;
  }

  /// <summary>Length of the TAX_ID_SUFFIX attribute.</summary>
  public const int TaxIdSuffix_MaxLength = 2;

  /// <summary>
  /// The value of the TAX_ID_SUFFIX attribute.
  /// This attribute specifies the 2 character suffix for the Tax ID.
  /// </summary>
  [JsonPropertyName("taxIdSuffix")]
  [Member(Index = 1, Type = MemberType.Char, Length = TaxIdSuffix_MaxLength, Optional
    = true)]
  public string TaxIdSuffix
  {
    get => taxIdSuffix;
    set => taxIdSuffix = value != null
      ? TrimEnd(Substring(value, 1, TaxIdSuffix_MaxLength)) : null;
  }

  /// <summary>Length of the TAX_ID attribute.</summary>
  public const int TaxId_MaxLength = 9;

  /// <summary>
  /// The value of the TAX_ID attribute.
  /// The tax id associated with the Tribunal.
  /// </summary>
  [JsonPropertyName("taxId")]
  [Member(Index = 2, Type = MemberType.Char, Length = TaxId_MaxLength, Optional
    = true)]
  public string TaxId
  {
    get => taxId;
    set => taxId = value != null
      ? TrimEnd(Substring(value, 1, TaxId_MaxLength)) : null;
  }

  /// <summary>
  /// The value of the IDENTIFIER attribute.
  /// This attribute uniquely identifies a tribunal record. It is automatically 
  /// generated by the system starting from 1.
  /// </summary>
  [JsonPropertyName("identifier")]
  [DefaultValue(0)]
  [Member(Index = 3, Type = MemberType.Number, Length = 9)]
  public int Identifier
  {
    get => identifier;
    set => identifier = value;
  }

  /// <summary>Length of the NAME attribute.</summary>
  public const int Name_MaxLength = 30;

  /// <summary>
  /// The value of the NAME attribute.
  /// This is the name which identifies the tribunal.
  /// </summary>
  [JsonIgnore]
  [DefaultValue("")]
  [Member(Index = 4, Type = MemberType.Char, Length = Name_MaxLength)]
  public string Name
  {
    get => name ?? "";
    set => name = TrimEnd(Substring(value, 1, Name_MaxLength));
  }

  /// <summary>
  /// The json value of the Name attribute.</summary>
  [JsonPropertyName("name")]
  [Computed]
  public string Name_Json
  {
    get => NullIf(Name, "");
    set => Name = value;
  }

  /// <summary>Length of the JUDICIAL_DISTRICT attribute.</summary>
  public const int JudicialDistrict_MaxLength = 5;

  /// <summary>
  /// The value of the JUDICIAL_DISTRICT attribute.
  /// This attribute specifies the Judicial District to which the Tribunal 
  /// belongs. The State is divided into a number of Judicial Districts. Each
  /// Judicial District consists of one or more County Courts.
  /// </summary>
  [JsonIgnore]
  [DefaultValue("")]
  [Member(Index = 5, Type = MemberType.Char, Length = JudicialDistrict_MaxLength)
    ]
  public string JudicialDistrict
  {
    get => judicialDistrict ?? "";
    set => judicialDistrict =
      TrimEnd(Substring(value, 1, JudicialDistrict_MaxLength));
  }

  /// <summary>
  /// The json value of the JudicialDistrict attribute.</summary>
  [JsonPropertyName("judicialDistrict")]
  [Computed]
  public string JudicialDistrict_Json
  {
    get => NullIf(JudicialDistrict, "");
    set => JudicialDistrict = value;
  }

  /// <summary>Length of the JUDICIAL_DIVISION attribute.</summary>
  public const int JudicialDivision_MaxLength = 6;

  /// <summary>
  /// The value of the JUDICIAL_DIVISION attribute.
  /// This attribute specifies the Judicial Division within the Judicial 
  /// District to which the Tribunal belongs. The State is divided into a number
  /// of Judicial Districts. Each Judicial District consists of one or more
  /// County Courts. Each County Court may have one or more Judicial Divisions.
  /// </summary>
  [JsonPropertyName("judicialDivision")]
  [Member(Index = 6, Type = MemberType.Char, Length
    = JudicialDivision_MaxLength, Optional = true)]
  public string JudicialDivision
  {
    get => judicialDivision;
    set => judicialDivision = value != null
      ? TrimEnd(Substring(value, 1, JudicialDivision_MaxLength)) : null;
  }

  /// <summary>Length of the CREATED_BY attribute.</summary>
  public const int CreatedBy_MaxLength = 8;

  /// <summary>
  /// The value of the CREATED_BY attribute.
  /// The signon of the person or program that created the occurrence of the 
  /// entity.
  /// </summary>
  [JsonIgnore]
  [DefaultValue("")]
  [Member(Index = 7, Type = MemberType.Char, Length = CreatedBy_MaxLength)]
  public string CreatedBy
  {
    get => createdBy ?? "";
    set => createdBy = TrimEnd(Substring(value, 1, CreatedBy_MaxLength));
  }

  /// <summary>
  /// The json value of the CreatedBy attribute.</summary>
  [JsonPropertyName("createdBy")]
  [Computed]
  public string CreatedBy_Json
  {
    get => NullIf(CreatedBy, "");
    set => CreatedBy = value;
  }

  /// <summary>
  /// The value of the CREATED_TSTAMP attribute.
  /// The date and time that the occurrence of the entity was created.
  /// </summary>
  [JsonPropertyName("createdTstamp")]
  [Member(Index = 8, Type = MemberType.Timestamp)]
  public DateTime? CreatedTstamp
  {
    get => createdTstamp;
    set => createdTstamp = value;
  }

  /// <summary>Length of the LAST_UPDATED_BY attribute.</summary>
  public const int LastUpdatedBy_MaxLength = 8;

  /// <summary>
  /// The value of the LAST_UPDATED_BY attribute.
  /// The signon of the person or program that last updated the occurrence of 
  /// the entity.
  /// </summary>
  [JsonPropertyName("lastUpdatedBy")]
  [Member(Index = 9, Type = MemberType.Char, Length = LastUpdatedBy_MaxLength, Optional
    = true)]
  public string LastUpdatedBy
  {
    get => lastUpdatedBy;
    set => lastUpdatedBy = value != null
      ? TrimEnd(Substring(value, 1, LastUpdatedBy_MaxLength)) : null;
  }

  /// <summary>
  /// The value of the LAST_UPDATED_TSTAMP attribute.
  /// The date and time that the occurrence of the entity was last updated.
  /// </summary>
  [JsonPropertyName("lastUpdatedTstamp")]
  [Member(Index = 10, Type = MemberType.Timestamp, Optional = true)]
  public DateTime? LastUpdatedTstamp
  {
    get => lastUpdatedTstamp;
    set => lastUpdatedTstamp = value;
  }

  /// <summary>Length of the DOCUMENT_HEADER_1 attribute.</summary>
  public const int DocumentHeader1_MaxLength = 57;

  /// <summary>
  /// The value of the DOCUMENT_HEADER_1 attribute.
  /// The first line of the header to be printed on legal documents submitted to
  /// the court.(Ex.&quot;In the Sac &amp; Fox Nation Tribal Court&quot;,
  /// &quot;In the District Court of Shawnee County, Kansas&quot;)
  /// </summary>
  [JsonPropertyName("documentHeader1")]
  [Member(Index = 11, Type = MemberType.Varchar, Length
    = DocumentHeader1_MaxLength, Optional = true)]
  public string DocumentHeader1
  {
    get => documentHeader1;
    set => documentHeader1 = value != null
      ? Substring(value, 1, DocumentHeader1_MaxLength) : null;
  }

  /// <summary>Length of the DOCUMENT_HEADER_2 attribute.</summary>
  public const int DocumentHeader2_MaxLength = 57;

  /// <summary>
  /// The value of the DOCUMENT_HEADER_2 attribute.
  /// The second line of the header to be printed on legal documents submitted 
  /// to the court.(Ex.&quot;Sac &amp; Fox Nation of Missouri&quot;)
  /// </summary>
  [JsonPropertyName("documentHeader2")]
  [Member(Index = 12, Type = MemberType.Varchar, Length
    = DocumentHeader2_MaxLength, Optional = true)]
  public string DocumentHeader2
  {
    get => documentHeader2;
    set => documentHeader2 = value != null
      ? Substring(value, 1, DocumentHeader2_MaxLength) : null;
  }

  /// <summary>Length of the DOCUMENT_HEADER_3 attribute.</summary>
  public const int DocumentHeader3_MaxLength = 57;

  /// <summary>
  /// The value of the DOCUMENT_HEADER_3 attribute.
  /// The third line of the header to be printed on legal documents submitted to
  /// the court. (Ex.&quot;Sac &amp; Fox Reservation&quot;)
  /// </summary>
  [JsonPropertyName("documentHeader3")]
  [Member(Index = 13, Type = MemberType.Varchar, Length
    = DocumentHeader3_MaxLength, Optional = true)]
  public string DocumentHeader3
  {
    get => documentHeader3;
    set => documentHeader3 = value != null
      ? Substring(value, 1, DocumentHeader3_MaxLength) : null;
  }

  /// <summary>Length of the DOCUMENT_HEADER_4 attribute.</summary>
  public const int DocumentHeader4_MaxLength = 57;

  /// <summary>
  /// The value of the DOCUMENT_HEADER_4 attribute.
  /// The fourth line of the header to be printed on legal documents submitted 
  /// to the court.(Ex.'Reserve,Kansas;)
  /// </summary>
  [JsonPropertyName("documentHeader4")]
  [Member(Index = 14, Type = MemberType.Varchar, Length
    = DocumentHeader4_MaxLength, Optional = true)]
  public string DocumentHeader4
  {
    get => documentHeader4;
    set => documentHeader4 = value != null
      ? Substring(value, 1, DocumentHeader4_MaxLength) : null;
  }

  /// <summary>Length of the DOCUMENT_HEADER_5 attribute.</summary>
  public const int DocumentHeader5_MaxLength = 57;

  /// <summary>
  /// The value of the DOCUMENT_HEADER_5 attribute.
  /// The fifth line of the header to be printed on legal documents submitted to
  /// the court.
  /// </summary>
  [JsonPropertyName("documentHeader5")]
  [Member(Index = 15, Type = MemberType.Varchar, Length
    = DocumentHeader5_MaxLength, Optional = true)]
  public string DocumentHeader5
  {
    get => documentHeader5;
    set => documentHeader5 = value != null
      ? Substring(value, 1, DocumentHeader5_MaxLength) : null;
  }

  /// <summary>Length of the DOCUMENT_HEADER_6 attribute.</summary>
  public const int DocumentHeader6_MaxLength = 57;

  /// <summary>
  /// The value of the DOCUMENT_HEADER_6 attribute.
  /// The sixth line of the header to be printed on legal documents submitted to
  /// the court.
  /// </summary>
  [JsonPropertyName("documentHeader6")]
  [Member(Index = 16, Type = MemberType.Varchar, Length
    = DocumentHeader6_MaxLength, Optional = true)]
  public string DocumentHeader6
  {
    get => documentHeader6;
    set => documentHeader6 = value != null
      ? Substring(value, 1, DocumentHeader6_MaxLength) : null;
  }

  /// <summary>
  /// The value of the LOCATION attribute.
  /// The last two positions of the FIPS code which identify a location within 
  /// the county.
  /// </summary>
  [JsonPropertyName("fipLocation")]
  [Member(Index = 17, Type = MemberType.Number, Length = 2, Optional = true)]
  public int? FipLocation
  {
    get => fipLocation;
    set => fipLocation = value;
  }

  /// <summary>
  /// The value of the COUNTY attribute.
  /// This is 3-5 position of the FIPS code identifying the county.
  /// </summary>
  [JsonPropertyName("fipCounty")]
  [Member(Index = 18, Type = MemberType.Number, Length = 3, Optional = true)]
  public int? FipCounty
  {
    get => fipCounty;
    set => fipCounty = value;
  }

  /// <summary>
  /// The value of the STATE attribute.
  /// The first two characters of the FIPS code which identify the state.
  /// </summary>
  [JsonPropertyName("fipState")]
  [Member(Index = 19, Type = MemberType.Number, Length = 2, Optional = true)]
  public int? FipState
  {
    get => fipState;
    set => fipState = value;
  }

  private string taxIdSuffix;
  private string taxId;
  private int identifier;
  private string name;
  private string judicialDistrict;
  private string judicialDivision;
  private string createdBy;
  private DateTime? createdTstamp;
  private string lastUpdatedBy;
  private DateTime? lastUpdatedTstamp;
  private string documentHeader1;
  private string documentHeader2;
  private string documentHeader3;
  private string documentHeader4;
  private string documentHeader5;
  private string documentHeader6;
  private int? fipLocation;
  private int? fipCounty;
  private int? fipState;
}
