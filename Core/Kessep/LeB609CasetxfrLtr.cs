// Program: LE_B609_CASETXFR_LTR, ID: 945241446, model: 746.
// Short name: SWEB609P
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Bphx.Cool;
using Gov.Kansas.DCF.Cse.Entities;
using Gov.Kansas.DCF.Cse.Worksets;

using static Bphx.Cool.Functions;

namespace Gov.Kansas.DCF.Cse.Kessep;

/// <summary>
/// A program: LE_B609_CASETXFR_LTR.
/// </summary>
[Serializable]
[ProcedureStep(ProcedureType.Batch)]
public partial class LeB609CasetxfrLtr: Bphx.Cool.Action
{
  /// <summary>
  /// Executes the LE_B609_CASETXFR_LTR program.
  /// </summary>
  [Entry]
  public static readonly Action<IContext, Import, Export> Execute =
    (c, i, e) => new LeB609CasetxfrLtr(c, i, e).Run();

  /// <summary>
  /// Constructs an instance of LeB609CasetxfrLtr.
  /// </summary>
  public LeB609CasetxfrLtr(IContext context, Import import, Export export):
    base(context)
  {
    this.import = import;
    this.export = export;
  }

#region Implementation
  /// <summary>Executes action's logic.</summary>
  public void Run()
  {
    // -------------------------------------------------------------------------------------------------------------------------
    // Date      Developer	Request #	Description
    // --------  ----------	----------	
    // ---------------------------------------------------------------------------------
    // 09/11/13 Dwayne Dupree  cq 30161    Need to mass produce the Case 
    // transfer letters that will print through mainframe.
    // -------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------
    //  This program prints the case transfer letter that was generated by 
    // swepb703 (srrun113) and swepb709 (srrun119).
    //  The letters will be printed on the mainframe printer not the print 
    // server.
    // The process flow will be the following:
    // 1) Set SWEPB703 PPI parameter to correct date value
    // 2) Run SRRUN113 (Case transfer batch)  This will create the document 
    // triggers
    // 3) Remove CASETXFR from SWEPB709 parameter list
    // 4) Run SRRUN119 (Dcouments Batch)  This will calculate the field values 
    // for each    document
    // 5) Add CASETXFR to SWEPB709 parameter list
    // 6) Run a SPUFI to set the prnt_sucessful_ind = (T) on all CASETXFR 
    // documents with
    //    prnt_sucessful_ind = 'R'
    // 7) Run the new print program (SWELB609) to read OUTGOING_DOC and 
    // FIELD_VALUES for the    CASETXFR documents  and create a mainframe
    // document.
    // -------------------------------------------------------------------------------------------------------------------------
    ExitState = "ACO_NN0000_ALL_OK";
    local.Open.Action = "OPEN";
    local.Close.Action = "CLOSE";
    local.NumberOfLinesPerPage.Count = 57;
    local.NumberOfLinesPerHeader.Count = 13;

    // -------------------------------------------------------------------------------------------------------------------------
    // --  General Housekeeping and Initializations.
    // -------------------------------------------------------------------------------------------------------------------------
    local.EabReportSend.ReportNumber = 1;
    UseSpEabWriteDocument2();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    foreach(var item in ReadOutgoingDocument())
    {
      local.Casxfrfrdt.TextDate = "";
      local.Casxfroffc.Text10 = "";
      local.Casxfrtodt.TextDate = "";
      local.Idar.Number = "";
      local.Syscurrdt.Text10 = "";
      local.Araddr1.Street = "";
      local.Araddr2.Street = "";
      local.Araddr3.Street = "";
      local.Araddr4.Street = "";
      local.Araddr5.Street = "";
      local.Arnm.FormattedName = "";
      local.Spaddr1.Street = "";
      local.Spaddr2.Street = "";
      local.Spaddr3.Street = "";
      local.Spofficenm.FormattedName = "";
      local.Casxfrap0.FormattedName = "";
      local.Casxfrap1.FormattedName = "";
      local.Casxfrap2.FormattedName = "";
      local.Casxfrap3.FormattedName = "";
      local.Casxfrap4.FormattedName = "";
      local.Casxfrap5.FormattedName = "";
      local.Casxfrap6.FormattedName = "";
      local.Casxfrap7.FormattedName = "";
      local.Casxfrap8.FormattedName = "";
      local.Casxfrap9.FormattedName = "";
      local.Casxfrcas0.Number = "";
      local.Casxfrcas1.Number = "";
      local.Casxfrcas2.Number = "";
      local.Casxfrcas3.Number = "";
      local.Casxfrcas4.Number = "";
      local.Casxfrcas5.Number = "";
      local.Casxfrcas6.Number = "";
      local.Casxfrcas7.Number = "";
      local.Casxfrcas8.Number = "";
      local.Casxfrcas9.Number = "";

      foreach(var item1 in ReadFieldFieldValue())
      {
        switch(TrimEnd(entities.Field.Name))
        {
          case "CASXFRFRDT":
            local.Casxfrfrdt.TextDate = entities.FieldValue.Value ?? Spaces(8);

            break;
          case "CASXFROFFC":
            local.Casxfroffc.Text10 = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRTODT":
            local.Casxfrtodt.TextDate = entities.FieldValue.Value ?? Spaces(8);

            break;
          case "IDAR":
            local.Idar.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "SYSCURRDT":
            local.Syscurrdt.Text10 = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "ARADDR1":
            local.Araddr1.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "ARADDR2":
            local.Araddr2.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "ARADDR3":
            local.Araddr3.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "ARADDR4":
            local.Araddr4.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "ARADDR5":
            local.Araddr5.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "ARNM":
            local.Arnm.FormattedName = entities.FieldValue.Value ?? Spaces(33);

            break;
          case "SPADDR1":
            local.Spaddr1.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "SPADDR2":
            local.Spaddr2.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "SPADDR3":
            local.Spaddr3.Street = entities.FieldValue.Value ?? Spaces(30);

            break;
          case "SPOFFICENM":
            local.Spofficenm.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP0":
            local.Casxfrap0.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP1":
            local.Casxfrap1.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP2":
            local.Casxfrap2.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP3":
            local.Casxfrap3.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP4":
            local.Casxfrap4.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP5":
            local.Casxfrap5.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP6":
            local.Casxfrap6.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP7":
            local.Casxfrap7.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP8":
            local.Casxfrap8.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRAP9":
            local.Casxfrap9.FormattedName = entities.FieldValue.Value ?? Spaces
              (33);

            break;
          case "CASXFRCAS0":
            local.Casxfrcas0.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS1":
            local.Casxfrcas1.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS2":
            local.Casxfrcas2.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS3":
            local.Casxfrcas3.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS4":
            local.Casxfrcas4.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS5":
            local.Casxfrcas5.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS6":
            local.Casxfrcas6.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS7":
            local.Casxfrcas7.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS8":
            local.Casxfrcas8.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          case "CASXFRCAS9":
            local.Casxfrcas9.Number = entities.FieldValue.Value ?? Spaces(10);

            break;
          default:
            break;
        }
      }

      local.EabFileHandling.Action = "WRITE";
      local.Common.Count = 0;
      local.PrintHeader.Index = -1;
      local.PrintHeader.Count = 0;

      do
      {
        ++local.PrintHeader.Index;
        local.PrintHeader.CheckSize();

        local.Print.RptDetail = "";

        switch(local.PrintHeader.Index + 1)
        {
          case 1:
            // --  Line 3   child support services unit
            local.Print.RptDetail = "                     " + "CHILD SUPPORT SERVICES";
              

            break;
          case 2:
            // --  Line 4   sp address 1
            local.Print.RptDetail = "                     " + local
              .Spaddr1.Street;

            break;
          case 3:
            // --  Line 5  sp address 2 line
            local.Print.RptDetail = "                     " + local
              .Spaddr2.Street;

            break;
          case 4:
            // --  Line 6  sp address 3 line
            local.Print.RptDetail = "                     " + local
              .Spaddr3.Street;

            break;
          case 5:
            // --  Line 7 blank
            local.Print.RptDetail = "";

            break;
          case 6:
            // --  Line 8  spaces
            local.Print.RptDetail = "";

            break;
          case 7:
            // --  Line 9   ar name
            local.Print.RptDetail = "                     " + local
              .Arnm.FormattedName;

            break;
          case 8:
            // --  Line 10  ar address 1
            local.Print.RptDetail = "                     " + local
              .Araddr1.Street;

            break;
          case 9:
            // --  Line 11 ar address 2
            local.Print.RptDetail = "                     " + local
              .Araddr2.Street;

            break;
          case 10:
            // --  Line 12  ar address 3
            local.Print.RptDetail = "                     " + local
              .Araddr3.Street;

            break;
          case 11:
            // --  Line 13 ar address 4
            local.Print.RptDetail = "                     " + local
              .Araddr4.Street;

            break;
          case 12:
            // --  Line 14  ar address 5
            local.Print.RptDetail = "                     " + local
              .Araddr5.Street;

            break;
          case 13:
            // --  Line 256 spaces
            local.Print.RptDetail = "";

            break;
          default:
            break;
        }

        ++local.Common.Count;

        // -- Determine the action to send to the eab report writer. (i.e. do we
        // need a page break)
        if (local.PrintHeader.Index == 0)
        {
          local.EabReportSend.Command = "NEWPAGE";
        }
        else if (local.Common.Count <= local.NumberOfLinesPerHeader.Count)
        {
          local.EabReportSend.Command = "DETAIL";
        }
        else
        {
          local.EabReportSend.Command = "NEWPAGE";
          local.Common.Count = 1;
        }

        local.EabReportSend.RptDetail = local.Print.RptDetail;
        local.EabReportSend.ReportNumber = 2;
        UseSpEabWriteDocument1();

        if (!Equal(local.EabFileHandling.Status, "OK"))
        {
          return;
        }
      }
      while(local.PrintHeader.Index < 12);

      local.EabFileHandling.Action = "WRITE";
      local.Common.Count = 0;
      local.PrintCasexfr.Index = -1;
      local.PrintCasexfr.Count = 0;

      do
      {
        ++local.PrintCasexfr.Index;
        local.PrintCasexfr.CheckSize();

        local.Print.RptDetail = "";

        switch(local.PrintCasexfr.Index + 1)
        {
          case 1:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 2:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 3:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 4:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 5:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 6:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 7:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 8:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 9:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 10:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 11:
            // --  Line 1   child support services unit
            local.Print.RptDetail =
              "Child Support Services Unit                                " + local
              .Syscurrdt.Text10;

            break;
          case 12:
            // --  Line 2   sp address 1
            local.Print.RptDetail = local.Spaddr1.Street;

            break;
          case 13:
            // --  Line 3  sp address 2 line
            local.Print.RptDetail = local.Spaddr2.Street;

            break;
          case 14:
            // --  Line 4  sp address 3 line
            local.Print.RptDetail = local.Spaddr3.Street;

            break;
          case 15:
            // --  Line 5 blank
            local.Print.RptDetail = "";

            break;
          case 16:
            // --  Line 6   ar name
            local.Print.RptDetail = local.Arnm.FormattedName;

            break;
          case 17:
            // --  Line 7  ar address 1
            local.Print.RptDetail = local.Araddr1.Street;

            break;
          case 18:
            // --  Line 8 ar address 2
            local.Print.RptDetail = local.Araddr2.Street;

            break;
          case 19:
            // --  Line 9  ar address 3
            local.Print.RptDetail = local.Araddr3.Street;

            break;
          case 20:
            // --  Line 10 ar address 4
            local.Print.RptDetail = local.Araddr4.Street;

            break;
          case 21:
            // --  Line 11  ar address 4
            local.Print.RptDetail = local.Araddr5.Street;

            break;
          case 22:
            // --  Line 12  spaces
            local.Print.RptDetail = "";

            break;
          case 23:
            // --  Line 13  change line
            local.Print.RptDetail =
              "There has been a change for your Child Support Services case(s):";
              

            break;
          case 24:
            // --  Line 14 IS SPACES
            local.Print.RptDetail = "";

            break;
          case 25:
            // --  Line 15   case number heading
            local.Print.RptDetail =
              "CASE NUMBER                             NONCUSTODIAL PARENT";

            break;
          case 26:
            // --  Line 16 case 1
            local.Print.RptDetail = local.Casxfrcas0.Number + "                              " +
              local.Casxfrap0.FormattedName;

            break;
          case 27:
            // --  Line 17 case 2
            local.Print.RptDetail = local.Casxfrcas1.Number + "                              " +
              local.Casxfrap1.FormattedName;

            break;
          case 28:
            // --  Line 18 case 3
            local.Print.RptDetail = local.Casxfrcas2.Number + "                              " +
              local.Casxfrap2.FormattedName;

            break;
          case 29:
            // --  Line 19 case 4
            local.Print.RptDetail = local.Casxfrcas3.Number + "                              " +
              local.Casxfrap3.FormattedName;

            break;
          case 30:
            // --  Line 20 case 5
            local.Print.RptDetail = local.Casxfrcas4.Number + "                              " +
              local.Casxfrap4.FormattedName;

            break;
          case 31:
            // --  Line 21  case 6
            local.Print.RptDetail = local.Casxfrcas5.Number + "                              " +
              local.Casxfrap5.FormattedName;

            break;
          case 32:
            // --  Line 22  case 7
            local.Print.RptDetail = local.Casxfrcas6.Number + "                              " +
              local.Casxfrap6.FormattedName;

            break;
          case 33:
            // --  Line 23 case 8
            local.Print.RptDetail = local.Casxfrcas7.Number + "                              " +
              local.Casxfrap7.FormattedName;

            break;
          case 34:
            // --  Line 24 case 9
            local.Print.RptDetail = local.Casxfrcas8.Number + "                              " +
              local.Casxfrap8.FormattedName;

            break;
          case 35:
            // --  Line 25 case 10
            local.Print.RptDetail = local.Casxfrcas9.Number + "                              " +
              local.Casxfrap9.FormattedName;

            break;
          case 36:
            // --  Line 26 spaces
            local.Print.RptDetail = "";

            break;
          case 37:
            // --  Line 27 1st text line
            local.Print.RptDetail =
              "DCF relocated where your case file will be handled. You do not need to take any";
              

            break;
          case 38:
            // --  Line 28 2nd line text
            local.Print.RptDetail =
              "action. We just want you to know the appropriate mailing address. The Child";
              

            break;
          case 39:
            // --  Line 29 3rd line text
            local.Print.RptDetail =
              "Support Services address where you may mail information, return forms or";
              

            break;
          case 40:
            // --  Line 29 3rd line text
            local.Print.RptDetail = "request information is now:";

            break;
          case 41:
            break;
          case 42:
            // --  Line 30 IS SPACES
            local.Print.RptDetail = "";

            // --  Line 31 sp office name
            local.Print.RptDetail = local.Spofficenm.FormattedName;

            break;
          case 43:
            // --  Line 32 sp address 1
            local.Print.RptDetail = local.Spaddr1.Street;

            break;
          case 44:
            // --  Line 33 sp address 2
            local.Print.RptDetail = local.Spaddr2.Street;

            break;
          case 45:
            // --  Line 34  sp address 3
            local.Print.RptDetail = local.Spaddr3.Street;

            break;
          case 46:
            // --  Line 35 IS SPACES
            local.Print.RptDetail = "";

            break;
          case 47:
            // --  Line 36  line 1 text
            local.Print.RptDetail =
              "The phone number for our Child Support Call Center remains the same,";
              

            break;
          case 48:
            // --  Line 37 line 2 text
            local.Print.RptDetail =
              "1-888-757-2445. If there has been a change in your information, such as a change";
              

            break;
          case 49:
            // --  Line 38 line 3 text
            local.Print.RptDetail =
              "of address or phone number, please call the Call Center toll free between 7 AM";
              

            break;
          case 50:
            // --  Line 39 line 4 text
            local.Print.RptDetail =
              "and 6 PM Central Time, Monday through Friday (except holidays) to report any";
              

            break;
          case 51:
            // --  Line 40 line 5 text
            local.Print.RptDetail =
              "changes or new information. Because our policies change from time to time, it is";
              

            break;
          case 52:
            // --  Line 41 line 6 text
            local.Print.RptDetail =
              "important that you review the current CSS Handbook on the Web at";
              

            break;
          case 53:
            // --  Line 42 line 7 text
            local.Print.RptDetail =
              "www.dcf.ks.gov/services/CSS/Pages/default.aspx at least once per year.";
              

            break;
          case 54:
            // --  Line 43 IS SPACES
            local.Print.RptDetail = "";

            break;
          case 55:
            // --  Line 44 signutre line 1
            local.Print.RptDetail = "Sincerely,";

            break;
          case 56:
            // --  Line 45 signutre line 2
            local.Print.RptDetail = "Your Child Support Services Program";

            break;
          case 57:
            // --  Line 43 IS SPACES
            local.Print.RptDetail = "";

            break;
          default:
            break;
        }

        ++local.Common.Count;

        // -- Determine the action to send to the eab report writer. (i.e. do we
        // need a page break)
        if (local.PrintCasexfr.Index == 0)
        {
          local.EabReportSend.Command = "NEWPAGE";
        }
        else if (local.Common.Count <= local.NumberOfLinesPerPage.Count)
        {
          local.EabReportSend.Command = "DETAIL";
        }
        else
        {
          local.EabReportSend.Command = "NEWPAGE";
          local.Common.Count = 1;
        }

        local.EabReportSend.RptDetail = local.Print.RptDetail;
        local.EabReportSend.ReportNumber = 2;
        UseSpEabWriteDocument1();

        if (!Equal(local.EabFileHandling.Status, "OK"))
        {
          return;
        }
      }
      while(local.PrintCasexfr.Index < 56);

      try
      {
        UpdateOutgoingDocument();
      }
      catch(Exception e)
      {
        switch(GetErrorCode(e))
        {
          case ErrorCode.AlreadyExists:
            ExitState = "OUTGOING_DOCUMENT_AE";

            break;
          case ErrorCode.PermittedValueViolation:
            ExitState = "OUTGOING_DOCUMENT_PV";

            break;
          case ErrorCode.DatabaseError:
            break;
          default:
            throw;
        }
      }
    }

    // -------------------------------------------------------------------------------------------------------------------------
    // --  Close the AR Statement Report files.
    // -------------------------------------------------------------------------------------------------------------------------
    local.Close.Action = "CLOSE";
    UseSpEabWriteDocument3();

    if (!Equal(local.Close.Status, "OK"))
    {
      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    ExitState = "ACO_NI0000_PROCESSING_COMPLETE";
  }

  private void UseSpEabWriteDocument1()
  {
    var useImport = new SpEabWriteDocument.Import();
    var useExport = new SpEabWriteDocument.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.EabReportSend.Assign(local.EabReportSend);
    useExport.EabFileHandling.Status = local.EabFileHandling.Status;

    Call(SpEabWriteDocument.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseSpEabWriteDocument2()
  {
    var useImport = new SpEabWriteDocument.Import();
    var useExport = new SpEabWriteDocument.Export();

    useImport.EabReportSend.Assign(local.EabReportSend);
    useImport.EabFileHandling.Action = local.Open.Action;
    useExport.EabFileHandling.Status = local.EabFileHandling.Status;

    Call(SpEabWriteDocument.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseSpEabWriteDocument3()
  {
    var useImport = new SpEabWriteDocument.Import();
    var useExport = new SpEabWriteDocument.Export();

    useImport.EabFileHandling.Action = local.Close.Action;
    useExport.EabFileHandling.Status = local.Close.Status;

    Call(SpEabWriteDocument.Execute, useImport, useExport);

    local.Close.Status = useExport.EabFileHandling.Status;
  }

  private IEnumerable<bool> ReadFieldFieldValue()
  {
    System.Diagnostics.Debug.Assert(entities.OutgoingDocument.Populated);
    entities.Field.Populated = false;
    entities.FieldValue.Populated = false;

    return ReadEach("ReadFieldFieldValue",
      (db, command) =>
      {
        db.SetInt32(command, "infIdentifier", entities.OutgoingDocument.InfId);
      },
      (db, reader) =>
      {
        entities.Field.Name = db.GetString(reader, 0);
        entities.Field.Dependancy = db.GetString(reader, 1);
        entities.Field.SubroutineName = db.GetString(reader, 2);
        entities.Field.ScreenName = db.GetString(reader, 3);
        entities.Field.Description = db.GetString(reader, 4);
        entities.Field.CreatedBy = db.GetString(reader, 5);
        entities.Field.CreatedTimestamp = db.GetDateTime(reader, 6);
        entities.Field.LastUpdatedBy = db.GetNullableString(reader, 7);
        entities.Field.LastUpdatedTimestamp = db.GetNullableDateTime(reader, 8);
        entities.FieldValue.Value = db.GetNullableString(reader, 9);
        entities.FieldValue.FldName = db.GetString(reader, 10);
        entities.FieldValue.DocName = db.GetString(reader, 11);
        entities.FieldValue.DocEffectiveDte = db.GetDate(reader, 12);
        entities.FieldValue.InfIdentifier = db.GetInt32(reader, 13);
        entities.Field.Populated = true;
        entities.FieldValue.Populated = true;

        return true;
      });
  }

  private IEnumerable<bool> ReadOutgoingDocument()
  {
    entities.OutgoingDocument.Populated = false;

    return ReadEach("ReadOutgoingDocument",
      null,
      (db, reader) =>
      {
        entities.OutgoingDocument.PrintSucessfulIndicator =
          db.GetString(reader, 0);
        entities.OutgoingDocument.CreatedBy = db.GetString(reader, 1);
        entities.OutgoingDocument.CreatedTimestamp = db.GetDateTime(reader, 2);
        entities.OutgoingDocument.LastUpdatedBy =
          db.GetNullableString(reader, 3);
        entities.OutgoingDocument.LastUpdatdTstamp =
          db.GetNullableDateTime(reader, 4);
        entities.OutgoingDocument.FieldValuesArchiveDate =
          db.GetNullableDate(reader, 5);
        entities.OutgoingDocument.FieldValuesArchiveInd =
          db.GetNullableString(reader, 6);
        entities.OutgoingDocument.InfId = db.GetInt32(reader, 7);
        entities.OutgoingDocument.Populated = true;
        CheckValid<OutgoingDocument>("FieldValuesArchiveInd",
          entities.OutgoingDocument.FieldValuesArchiveInd);

        return true;
      });
  }

  private void UpdateOutgoingDocument()
  {
    System.Diagnostics.Debug.Assert(entities.OutgoingDocument.Populated);

    var printSucessfulIndicator = "Y";

    entities.OutgoingDocument.Populated = false;
    Update("UpdateOutgoingDocument",
      (db, command) =>
      {
        db.SetString(command, "prntSucessfulInd", printSucessfulIndicator);
        db.SetInt32(command, "infId", entities.OutgoingDocument.InfId);
      });

    entities.OutgoingDocument.PrintSucessfulIndicator = printSucessfulIndicator;
    entities.OutgoingDocument.Populated = true;
  }
#endregion

#region Parameters.
  protected readonly Import import;
  protected readonly Export export;
  protected readonly Local local = new();
  protected readonly Entities entities = new();
#endregion

#region Structures
  /// <summary>
  /// This class defines import view.
  /// </summary>
  [Serializable]
  public class Import
  {
  }

  /// <summary>
  /// This class defines export view.
  /// </summary>
  [Serializable]
  public class Export
  {
  }

  /// <summary>
  /// This class defines local view.
  /// </summary>
  [Serializable]
  public class Local
  {
    /// <summary>A PrintHeaderGroup group.</summary>
    [Serializable]
    public class PrintHeaderGroup
    {
      /// <summary>
      /// A value of PrintHeader1.
      /// </summary>
      [JsonPropertyName("printHeader1")]
      public EabReportSend PrintHeader1
      {
        get => printHeader1 ??= new();
        set => printHeader1 = value;
      }

      /// <summary>A collection capacity.</summary>
      public const int Capacity = 1000;

      private EabReportSend printHeader1;
    }

    /// <summary>A PrintCasexfrGroup group.</summary>
    [Serializable]
    public class PrintCasexfrGroup
    {
      /// <summary>
      /// A value of GlocalReportDetailLineEoa.
      /// </summary>
      [JsonPropertyName("glocalReportDetailLineEoa")]
      public EabReportSend GlocalReportDetailLineEoa
      {
        get => glocalReportDetailLineEoa ??= new();
        set => glocalReportDetailLineEoa = value;
      }

      /// <summary>A collection capacity.</summary>
      public const int Capacity = 1000;

      private EabReportSend glocalReportDetailLineEoa;
    }

    /// <summary>
    /// A value of NumberOfLinesPerHeader.
    /// </summary>
    [JsonPropertyName("numberOfLinesPerHeader")]
    public Common NumberOfLinesPerHeader
    {
      get => numberOfLinesPerHeader ??= new();
      set => numberOfLinesPerHeader = value;
    }

    /// <summary>
    /// Gets a value of PrintHeader.
    /// </summary>
    [JsonIgnore]
    public Array<PrintHeaderGroup> PrintHeader => printHeader ??= new(
      PrintHeaderGroup.Capacity, 0);

    /// <summary>
    /// Gets a value of PrintHeader for json serialization.
    /// </summary>
    [JsonPropertyName("printHeader")]
    [Computed]
    public IList<PrintHeaderGroup> PrintHeader_Json
    {
      get => printHeader;
      set => PrintHeader.Assign(value);
    }

    /// <summary>
    /// A value of Syscurrdt.
    /// </summary>
    [JsonPropertyName("syscurrdt")]
    public TextWorkArea Syscurrdt
    {
      get => syscurrdt ??= new();
      set => syscurrdt = value;
    }

    /// <summary>
    /// A value of Casxfrcas9.
    /// </summary>
    [JsonPropertyName("casxfrcas9")]
    public Case1 Casxfrcas9
    {
      get => casxfrcas9 ??= new();
      set => casxfrcas9 = value;
    }

    /// <summary>
    /// A value of Casxfrcas8.
    /// </summary>
    [JsonPropertyName("casxfrcas8")]
    public Case1 Casxfrcas8
    {
      get => casxfrcas8 ??= new();
      set => casxfrcas8 = value;
    }

    /// <summary>
    /// A value of Casxfrcas7.
    /// </summary>
    [JsonPropertyName("casxfrcas7")]
    public Case1 Casxfrcas7
    {
      get => casxfrcas7 ??= new();
      set => casxfrcas7 = value;
    }

    /// <summary>
    /// A value of Casxfrcas6.
    /// </summary>
    [JsonPropertyName("casxfrcas6")]
    public Case1 Casxfrcas6
    {
      get => casxfrcas6 ??= new();
      set => casxfrcas6 = value;
    }

    /// <summary>
    /// A value of Casxfrcas5.
    /// </summary>
    [JsonPropertyName("casxfrcas5")]
    public Case1 Casxfrcas5
    {
      get => casxfrcas5 ??= new();
      set => casxfrcas5 = value;
    }

    /// <summary>
    /// A value of Casxfrcas4.
    /// </summary>
    [JsonPropertyName("casxfrcas4")]
    public Case1 Casxfrcas4
    {
      get => casxfrcas4 ??= new();
      set => casxfrcas4 = value;
    }

    /// <summary>
    /// A value of Casxfrcas3.
    /// </summary>
    [JsonPropertyName("casxfrcas3")]
    public Case1 Casxfrcas3
    {
      get => casxfrcas3 ??= new();
      set => casxfrcas3 = value;
    }

    /// <summary>
    /// A value of Casxfrcas2.
    /// </summary>
    [JsonPropertyName("casxfrcas2")]
    public Case1 Casxfrcas2
    {
      get => casxfrcas2 ??= new();
      set => casxfrcas2 = value;
    }

    /// <summary>
    /// A value of Casxfrcas1.
    /// </summary>
    [JsonPropertyName("casxfrcas1")]
    public Case1 Casxfrcas1
    {
      get => casxfrcas1 ??= new();
      set => casxfrcas1 = value;
    }

    /// <summary>
    /// A value of Casxfrcas0.
    /// </summary>
    [JsonPropertyName("casxfrcas0")]
    public Case1 Casxfrcas0
    {
      get => casxfrcas0 ??= new();
      set => casxfrcas0 = value;
    }

    /// <summary>
    /// A value of Casxfrap9.
    /// </summary>
    [JsonPropertyName("casxfrap9")]
    public CsePersonsWorkSet Casxfrap9
    {
      get => casxfrap9 ??= new();
      set => casxfrap9 = value;
    }

    /// <summary>
    /// A value of Casxfrap8.
    /// </summary>
    [JsonPropertyName("casxfrap8")]
    public CsePersonsWorkSet Casxfrap8
    {
      get => casxfrap8 ??= new();
      set => casxfrap8 = value;
    }

    /// <summary>
    /// A value of Casxfrap7.
    /// </summary>
    [JsonPropertyName("casxfrap7")]
    public CsePersonsWorkSet Casxfrap7
    {
      get => casxfrap7 ??= new();
      set => casxfrap7 = value;
    }

    /// <summary>
    /// A value of Casxfrap6.
    /// </summary>
    [JsonPropertyName("casxfrap6")]
    public CsePersonsWorkSet Casxfrap6
    {
      get => casxfrap6 ??= new();
      set => casxfrap6 = value;
    }

    /// <summary>
    /// A value of Casxfrap5.
    /// </summary>
    [JsonPropertyName("casxfrap5")]
    public CsePersonsWorkSet Casxfrap5
    {
      get => casxfrap5 ??= new();
      set => casxfrap5 = value;
    }

    /// <summary>
    /// A value of Casxfrap4.
    /// </summary>
    [JsonPropertyName("casxfrap4")]
    public CsePersonsWorkSet Casxfrap4
    {
      get => casxfrap4 ??= new();
      set => casxfrap4 = value;
    }

    /// <summary>
    /// A value of Casxfrap3.
    /// </summary>
    [JsonPropertyName("casxfrap3")]
    public CsePersonsWorkSet Casxfrap3
    {
      get => casxfrap3 ??= new();
      set => casxfrap3 = value;
    }

    /// <summary>
    /// A value of Casxfrap2.
    /// </summary>
    [JsonPropertyName("casxfrap2")]
    public CsePersonsWorkSet Casxfrap2
    {
      get => casxfrap2 ??= new();
      set => casxfrap2 = value;
    }

    /// <summary>
    /// A value of Casxfrap1.
    /// </summary>
    [JsonPropertyName("casxfrap1")]
    public CsePersonsWorkSet Casxfrap1
    {
      get => casxfrap1 ??= new();
      set => casxfrap1 = value;
    }

    /// <summary>
    /// A value of Casxfrap0.
    /// </summary>
    [JsonPropertyName("casxfrap0")]
    public CsePersonsWorkSet Casxfrap0
    {
      get => casxfrap0 ??= new();
      set => casxfrap0 = value;
    }

    /// <summary>
    /// A value of Spofficenm.
    /// </summary>
    [JsonPropertyName("spofficenm")]
    public CsePersonsWorkSet Spofficenm
    {
      get => spofficenm ??= new();
      set => spofficenm = value;
    }

    /// <summary>
    /// A value of Spaddr3.
    /// </summary>
    [JsonPropertyName("spaddr3")]
    public AddressRecord Spaddr3
    {
      get => spaddr3 ??= new();
      set => spaddr3 = value;
    }

    /// <summary>
    /// A value of Spaddr2.
    /// </summary>
    [JsonPropertyName("spaddr2")]
    public AddressRecord Spaddr2
    {
      get => spaddr2 ??= new();
      set => spaddr2 = value;
    }

    /// <summary>
    /// A value of Spaddr1.
    /// </summary>
    [JsonPropertyName("spaddr1")]
    public AddressRecord Spaddr1
    {
      get => spaddr1 ??= new();
      set => spaddr1 = value;
    }

    /// <summary>
    /// A value of Arnm.
    /// </summary>
    [JsonPropertyName("arnm")]
    public CsePersonsWorkSet Arnm
    {
      get => arnm ??= new();
      set => arnm = value;
    }

    /// <summary>
    /// A value of Araddr5.
    /// </summary>
    [JsonPropertyName("araddr5")]
    public AddressRecord Araddr5
    {
      get => araddr5 ??= new();
      set => araddr5 = value;
    }

    /// <summary>
    /// A value of Araddr4.
    /// </summary>
    [JsonPropertyName("araddr4")]
    public AddressRecord Araddr4
    {
      get => araddr4 ??= new();
      set => araddr4 = value;
    }

    /// <summary>
    /// A value of Araddr3.
    /// </summary>
    [JsonPropertyName("araddr3")]
    public AddressRecord Araddr3
    {
      get => araddr3 ??= new();
      set => araddr3 = value;
    }

    /// <summary>
    /// A value of Araddr2.
    /// </summary>
    [JsonPropertyName("araddr2")]
    public AddressRecord Araddr2
    {
      get => araddr2 ??= new();
      set => araddr2 = value;
    }

    /// <summary>
    /// A value of Araddr1.
    /// </summary>
    [JsonPropertyName("araddr1")]
    public AddressRecord Araddr1
    {
      get => araddr1 ??= new();
      set => araddr1 = value;
    }

    /// <summary>
    /// A value of SyscurrdtDelete.
    /// </summary>
    [JsonPropertyName("syscurrdtDelete")]
    public DateWorkArea SyscurrdtDelete
    {
      get => syscurrdtDelete ??= new();
      set => syscurrdtDelete = value;
    }

    /// <summary>
    /// A value of Idar.
    /// </summary>
    [JsonPropertyName("idar")]
    public CsePersonsWorkSet Idar
    {
      get => idar ??= new();
      set => idar = value;
    }

    /// <summary>
    /// A value of Casxfroffc.
    /// </summary>
    [JsonPropertyName("casxfroffc")]
    public WorkArea Casxfroffc
    {
      get => casxfroffc ??= new();
      set => casxfroffc = value;
    }

    /// <summary>
    /// A value of Casxfrtodt.
    /// </summary>
    [JsonPropertyName("casxfrtodt")]
    public DateWorkArea Casxfrtodt
    {
      get => casxfrtodt ??= new();
      set => casxfrtodt = value;
    }

    /// <summary>
    /// A value of Casxfrfrdt.
    /// </summary>
    [JsonPropertyName("casxfrfrdt")]
    public DateWorkArea Casxfrfrdt
    {
      get => casxfrfrdt ??= new();
      set => casxfrfrdt = value;
    }

    /// <summary>
    /// A value of Local1Delete.
    /// </summary>
    [JsonPropertyName("local1Delete")]
    public Office Local1Delete
    {
      get => local1Delete ??= new();
      set => local1Delete = value;
    }

    /// <summary>
    /// A value of RptDelete.
    /// </summary>
    [JsonPropertyName("rptDelete")]
    public EabReportSend RptDelete
    {
      get => rptDelete ??= new();
      set => rptDelete = value;
    }

    /// <summary>
    /// A value of EabFileHandling.
    /// </summary>
    [JsonPropertyName("eabFileHandling")]
    public EabFileHandling EabFileHandling
    {
      get => eabFileHandling ??= new();
      set => eabFileHandling = value;
    }

    /// <summary>
    /// A value of WorkArea1.
    /// </summary>
    [JsonPropertyName("workArea1")]
    public WorkArea WorkArea1
    {
      get => workArea1 ??= new();
      set => workArea1 = value;
    }

    /// <summary>
    /// A value of EabReportSend.
    /// </summary>
    [JsonPropertyName("eabReportSend")]
    public EabReportSend EabReportSend
    {
      get => eabReportSend ??= new();
      set => eabReportSend = value;
    }

    /// <summary>
    /// A value of Open.
    /// </summary>
    [JsonPropertyName("open")]
    public EabFileHandling Open
    {
      get => open ??= new();
      set => open = value;
    }

    /// <summary>
    /// A value of Close.
    /// </summary>
    [JsonPropertyName("close")]
    public EabFileHandling Close
    {
      get => close ??= new();
      set => close = value;
    }

    /// <summary>
    /// A value of ReadDelete.
    /// </summary>
    [JsonPropertyName("readDelete")]
    public EabFileHandling ReadDelete
    {
      get => readDelete ??= new();
      set => readDelete = value;
    }

    /// <summary>
    /// A value of ProgramProcessingInfo.
    /// </summary>
    [JsonPropertyName("programProcessingInfo")]
    public ProgramProcessingInfo ProgramProcessingInfo
    {
      get => programProcessingInfo ??= new();
      set => programProcessingInfo = value;
    }

    /// <summary>
    /// A value of External.
    /// </summary>
    [JsonPropertyName("external")]
    public External External
    {
      get => external ??= new();
      set => external = value;
    }

    /// <summary>
    /// A value of ExitStateWorkArea.
    /// </summary>
    [JsonPropertyName("exitStateWorkArea")]
    public ExitStateWorkArea ExitStateWorkArea
    {
      get => exitStateWorkArea ??= new();
      set => exitStateWorkArea = value;
    }

    /// <summary>
    /// A value of Start.
    /// </summary>
    [JsonPropertyName("start")]
    public Common Start
    {
      get => start ??= new();
      set => start = value;
    }

    /// <summary>
    /// A value of Current.
    /// </summary>
    [JsonPropertyName("current")]
    public Common Current
    {
      get => current ??= new();
      set => current = value;
    }

    /// <summary>
    /// A value of CurrentPosition.
    /// </summary>
    [JsonPropertyName("currentPosition")]
    public Common CurrentPosition
    {
      get => currentPosition ??= new();
      set => currentPosition = value;
    }

    /// <summary>
    /// A value of FieldNumber.
    /// </summary>
    [JsonPropertyName("fieldNumber")]
    public Common FieldNumber
    {
      get => fieldNumber ??= new();
      set => fieldNumber = value;
    }

    /// <summary>
    /// A value of IncludeArrearsOnly.
    /// </summary>
    [JsonPropertyName("includeArrearsOnly")]
    public Common IncludeArrearsOnly
    {
      get => includeArrearsOnly ??= new();
      set => includeArrearsOnly = value;
    }

    /// <summary>
    /// A value of Postion.
    /// </summary>
    [JsonPropertyName("postion")]
    public TextWorkArea Postion
    {
      get => postion ??= new();
      set => postion = value;
    }

    /// <summary>
    /// A value of WorkArea2.
    /// </summary>
    [JsonPropertyName("workArea2")]
    public WorkArea WorkArea2
    {
      get => workArea2 ??= new();
      set => workArea2 = value;
    }

    /// <summary>
    /// A value of MinimumAmountOwed.
    /// </summary>
    [JsonPropertyName("minimumAmountOwed")]
    public Common MinimumAmountOwed
    {
      get => minimumAmountOwed ??= new();
      set => minimumAmountOwed = value;
    }

    /// <summary>
    /// A value of NumberOfDays.
    /// </summary>
    [JsonPropertyName("numberOfDays")]
    public Common NumberOfDays
    {
      get => numberOfDays ??= new();
      set => numberOfDays = value;
    }

    /// <summary>
    /// A value of ArrearsOnly.
    /// </summary>
    [JsonPropertyName("arrearsOnly")]
    public Common ArrearsOnly
    {
      get => arrearsOnly ??= new();
      set => arrearsOnly = value;
    }

    /// <summary>
    /// A value of Common.
    /// </summary>
    [JsonPropertyName("common")]
    public Common Common
    {
      get => common ??= new();
      set => common = value;
    }

    /// <summary>
    /// Gets a value of PrintCasexfr.
    /// </summary>
    [JsonIgnore]
    public Array<PrintCasexfrGroup> PrintCasexfr => printCasexfr ??= new(
      PrintCasexfrGroup.Capacity, 0);

    /// <summary>
    /// Gets a value of PrintCasexfr for json serialization.
    /// </summary>
    [JsonPropertyName("printCasexfr")]
    [Computed]
    public IList<PrintCasexfrGroup> PrintCasexfr_Json
    {
      get => printCasexfr;
      set => PrintCasexfr.Assign(value);
    }

    /// <summary>
    /// A value of Print.
    /// </summary>
    [JsonPropertyName("print")]
    public EabReportSend Print
    {
      get => print ??= new();
      set => print = value;
    }

    /// <summary>
    /// A value of LegalCaption.
    /// </summary>
    [JsonPropertyName("legalCaption")]
    public WorkArea LegalCaption
    {
      get => legalCaption ??= new();
      set => legalCaption = value;
    }

    /// <summary>
    /// A value of NumberOfLinesPerPage.
    /// </summary>
    [JsonPropertyName("numberOfLinesPerPage")]
    public Common NumberOfLinesPerPage
    {
      get => numberOfLinesPerPage ??= new();
      set => numberOfLinesPerPage = value;
    }

    private Common numberOfLinesPerHeader;
    private Array<PrintHeaderGroup> printHeader;
    private TextWorkArea syscurrdt;
    private Case1 casxfrcas9;
    private Case1 casxfrcas8;
    private Case1 casxfrcas7;
    private Case1 casxfrcas6;
    private Case1 casxfrcas5;
    private Case1 casxfrcas4;
    private Case1 casxfrcas3;
    private Case1 casxfrcas2;
    private Case1 casxfrcas1;
    private Case1 casxfrcas0;
    private CsePersonsWorkSet casxfrap9;
    private CsePersonsWorkSet casxfrap8;
    private CsePersonsWorkSet casxfrap7;
    private CsePersonsWorkSet casxfrap6;
    private CsePersonsWorkSet casxfrap5;
    private CsePersonsWorkSet casxfrap4;
    private CsePersonsWorkSet casxfrap3;
    private CsePersonsWorkSet casxfrap2;
    private CsePersonsWorkSet casxfrap1;
    private CsePersonsWorkSet casxfrap0;
    private CsePersonsWorkSet spofficenm;
    private AddressRecord spaddr3;
    private AddressRecord spaddr2;
    private AddressRecord spaddr1;
    private CsePersonsWorkSet arnm;
    private AddressRecord araddr5;
    private AddressRecord araddr4;
    private AddressRecord araddr3;
    private AddressRecord araddr2;
    private AddressRecord araddr1;
    private DateWorkArea syscurrdtDelete;
    private CsePersonsWorkSet idar;
    private WorkArea casxfroffc;
    private DateWorkArea casxfrtodt;
    private DateWorkArea casxfrfrdt;
    private Office local1Delete;
    private EabReportSend rptDelete;
    private EabFileHandling eabFileHandling;
    private WorkArea workArea1;
    private EabReportSend eabReportSend;
    private EabFileHandling open;
    private EabFileHandling close;
    private EabFileHandling readDelete;
    private ProgramProcessingInfo programProcessingInfo;
    private External external;
    private ExitStateWorkArea exitStateWorkArea;
    private Common start;
    private Common current;
    private Common currentPosition;
    private Common fieldNumber;
    private Common includeArrearsOnly;
    private TextWorkArea postion;
    private WorkArea workArea2;
    private Common minimumAmountOwed;
    private Common numberOfDays;
    private Common arrearsOnly;
    private Common common;
    private Array<PrintCasexfrGroup> printCasexfr;
    private EabReportSend print;
    private WorkArea legalCaption;
    private Common numberOfLinesPerPage;
  }

  /// <summary>
  /// This class defines entity view.
  /// </summary>
  [Serializable]
  public class Entities
  {
    /// <summary>
    /// A value of DocumentField.
    /// </summary>
    [JsonPropertyName("documentField")]
    public DocumentField DocumentField
    {
      get => documentField ??= new();
      set => documentField = value;
    }

    /// <summary>
    /// A value of Document.
    /// </summary>
    [JsonPropertyName("document")]
    public Document Document
    {
      get => document ??= new();
      set => document = value;
    }

    /// <summary>
    /// A value of Field.
    /// </summary>
    [JsonPropertyName("field")]
    public Field Field
    {
      get => field ??= new();
      set => field = value;
    }

    /// <summary>
    /// A value of FieldValue.
    /// </summary>
    [JsonPropertyName("fieldValue")]
    public FieldValue FieldValue
    {
      get => fieldValue ??= new();
      set => fieldValue = value;
    }

    /// <summary>
    /// A value of OutgoingDocument.
    /// </summary>
    [JsonPropertyName("outgoingDocument")]
    public OutgoingDocument OutgoingDocument
    {
      get => outgoingDocument ??= new();
      set => outgoingDocument = value;
    }

    private DocumentField documentField;
    private Document document;
    private Field field;
    private FieldValue fieldValue;
    private OutgoingDocument outgoingDocument;
  }
#endregion
}
