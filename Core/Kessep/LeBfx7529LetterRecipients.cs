// Program: LE_BFX7_529_LETTER_RECIPIENTS, ID: 945130828, model: 746.
// Short name: SWELFX7B
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Bphx.Cool;
using Gov.Kansas.DCF.Cse.Entities;
using Gov.Kansas.DCF.Cse.Worksets;

using static Bphx.Cool.Functions;

namespace Gov.Kansas.DCF.Cse.Kessep;

/// <summary>
/// A program: LE_BFX7_529_LETTER_RECIPIENTS.
/// </summary>
[Serializable]
[ProcedureStep(ProcedureType.Batch)]
public partial class LeBfx7529LetterRecipients: Bphx.Cool.Action
{
  /// <summary>
  /// Executes the LE_BFX7_529_LETTER_RECIPIENTS program.
  /// </summary>
  [Entry]
  public static readonly Action<IContext, Import, Export> Execute =
    (c, i, e) => new LeBfx7529LetterRecipients(c, i, e).Run();

  /// <summary>
  /// Constructs an instance of LeBfx7529LetterRecipients.
  /// </summary>
  public LeBfx7529LetterRecipients(IContext context, Import import,
    Export export):
    base(context)
  {
    this.import = import;
    this.export = export;
  }

#region Implementation
  /// <summary>Executes action's logic.</summary>
  public void Run()
  {
    // --------------------------------------------------------------------------------------------------
    // Date      Developer	Request #	Description
    // --------  ----------	----------	
    // ---------------------------------------------------------
    // 06/11/13  GVandy	CQ39342		Initial Development.
    // 01/06/14  GVandy	CQ42192		New requirements for a second round of the 529 
    // letter.
    // --------------------------------------------------------------------------------------------------
    // --------------------------------------------------------------------------------------------------
    // Business Rules
    // A) Program to identify qualified NCP/Child Combinations and data returned
    // that can be analyzed.  Qualified NCP/Child Combinations include:
    // 	1) NCPs that are NOT deceased
    // 	2) NCPs with minor children that are NOT deceased
    // 	3) The program should NOT return NCPs that have no arrears.
    // 	4) NCPs MUST HAVE arrears owed to any of the following programs:
    // 		     NA,NAI,AF,FC,NC,NF (AFI and FCI are excluded).  Updated 2/28/14
    // 	5) The program should return the amount of arrears owed to the State and
    // the
    // 	   family by each qualified NCP Updated 2/28/14
    // 	6) The program should return the State and County of the Court order
    // 	   associated to the qualified NCP/Child Combination Debt
    // 	7) The program should include NCP/Child combination when the only money 
    // owed
    // 	   is an out of state court order.
    // 	8) If NCP/Child has 2 or more debts from 2 or more counties, for 
    // example, we
    // 	   got a 718b in Shawnee, but then current for the same child in 
    // Sedgwick and
    // 	   that also has state arrears. Program should return:
    // 		 SN County   Total Owed in SN        SG County     Total Owed in SG
    // 	9) The program should return the CP active for the NCP/Child Combination
    // as
    // 	   of the run date.
    // 	10) The program should identify if the CP is deceased, however, ok to 
    // return
    // 	    this result on the data.
    // 	11) The program should return the most recent and not end dated VERIFIED
    // 	    Domestic Address, Zip Code /County of the NCP returned for data 
    // analysis.
    // 	    CSS Central Office will identify Region.
    // 	12) The program should return the most recent and not end dated VERIFIED
    // Zip
    // 	    Code /County of the CP returned for data analysis. CSS Central 
    // Office
    // 	    will identify Region.
    // 	13) The program will create a separate list of cases in Office 51 and/or
    // 	    where parental rights are severed with a code of B, F, M or Y  to be
    // 	    worked manually by CSS Central Office.
    // 	14) The program should include all NCP/CH combinations that have either 
    // blank
    // 	    or N for parental rights severed.
    // 	15) The program should include cases that have an organization as the 
    // CP.
    // 	16) Program to identify qualified NCP/Child Combinations and data 
    // returned
    // 	    that can be analyzed.  The program will first look for the case 
    // where the
    // 	    AP/CH is currently active together as of the run date.  If none is 
    // found,
    // 	    the program will look for the case where the AP/CH combination was 
    // most
    // 	    recently active.  If none is found, the obligation for the AP/CH 
    // will be
    // 	    skipped.
    // B) 529 Letter generated to Qualified NCPs
    // 	1) Letters should only be generated to Qualified NCPs from #1 above.
    // 	2) Removed 2/19/14
    // 	3) This letter will be generated by the division of printing.  DCF will
    // 	   provide one file with the NCPs for the State arrears mailer and a
    // 	   separate file with the NCPs for the Family arrears mailer containing
    // the
    // 	   NCP name, address and NCP person number to the division of printing.
    // 	   Updated 6/26/14
    // 		i.   The files will be tab delimited (text)
    // 		ii.  The NCP person number will display first.
    // 		iii. The full name will be in one column (First name, Last name)
    // 		iv.  The address will be in two columns (First column = street
    // 		     number, direction, street, po box, apt #) (Second Column = City,
    // 		     State, Zip).
    // 	4) The division of printing will have two mailers one for Family Arrears
    // and
    // 	   one for State Arrears. The NCP will receive up to one State and/or 
    // Family
    // 	   arrears mailer regardless of the number of NCP/Child combinations. 
    // Added
    // 	   6/26/14
    // 		i.   If the NCP owes only State arrears the NCP will receive the
    // 		     State Arrears mailer.
    // 		ii.  If the NCP only owes Family Arrears the NCP will receive the
    // 		     Family Arrears mailer.
    // 		iii. If the NCP owes State and Family arrears for a single child the
    // 		     NCP will receive a State Arrears mailer.
    // 		iv.  If the NCP owes State arrears for one child and Family Arrears
    // 		     for another child the NCP will receive a State arrears and a
    // 		     Family arrears mailer. Added 6/26/14
    // 	5) The NCP person number will be included on the letter. Added 2/19/14
    // 	   Qualified NCP = NCPs that are NOT deceased, NCPs with minor children 
    // that
    // 	   are NOT deceased.  NCPs MUST HAVE arrears owed to any of the 
    // following
    // 	   programs: NA,NAI,AF,FC,NC,NF (AFI and FCI are excluded).  Updated 5/
    // 21/14
    // C) 529 Letter generated to Matching CP on Qualified NCP/Child Combination
    // 	1) The system must generate a Letter to a qualified CP.
    // 	2) Letter should only be generated to matching CP on the Qualified
    // 	   NCP/Child's case.
    // 	3) Letters should only be generated to Non-Organization CPs that are NOT
    // 	   deceased and have a GOOD (Verified) address.
    // 	4) A separate letter will be generated for each unique CP/Child 
    // combination.
    // 	   One letter per CP will be generated regardless of the number of NCP/
    // Child
    // 	   combinations. Updated 2/19/14
    // 	5) The CP person number will be included on the letter. Added 2/19/14
    // --------------------------------------------------------------------------------------------------
    ExitState = "ACO_NN0000_ALL_OK";

    // -------------------------------------------------------------------------------------
    // --  Read the PPI Record.
    // -------------------------------------------------------------------------------------
    local.ProgramProcessingInfo.Name = "SWELBFX7";
    UseReadProgramProcessingInfo();

    // -------------------------------------------------------------------------------------
    // --  Open the Error Report.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "OPEN";
    local.EabReportSend.ProgramName = global.UserId;
    local.EabReportSend.ProcessDate = local.ProgramProcessingInfo.ProcessDate;
    UseCabErrorReport3();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      ExitState = "FN0000_ERROR_OPENING_ERROR_RPT";

      return;
    }

    if (!IsExitState("ACO_NN0000_ALL_OK"))
    {
      // -- This could have resulted from not finding the PPI record.
      // -- Extract the exit state message and write to the error report.
      UseEabExtractExitStateMessage();
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail = "Initialization Error..." + local
        .ExitStateWorkArea.Message;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Open the Control Report.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "OPEN";
    UseCabControlReport3();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail =
        "Error opening the control report.  Return status = " + local
        .EabFileHandling.Status;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Open the Three Output Files (NCP family only arrears, NCP state owed 
    // arrears, CP).
    // -------------------------------------------------------------------------------------
    for(local.Common.Count = 1; local.Common.Count <= 3; ++local.Common.Count)
    {
      local.FileNumber.Text1 = NumberToString(local.Common.Count, 15, 1);
      local.EabFileHandling.Action = "OPEN";
      UseLeBfx7WriteFile3();

      if (!Equal(local.EabFileHandling.Status, "OK"))
      {
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail =
          "Error opening output file.  Return status = " + local
          .EabFileHandling.Status;
        UseCabErrorReport2();

        // -- Set Abort exit state and escape...
        ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

        return;
      }
    }

    local.EabReportSend.BlankLineAfterHeading = "Y";

    // -------------------------------------------------------------------------------------
    // --  Open Business Report 1.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "OPEN";
    UseCabBusinessReport2();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail =
        "Error opening Business Report 1.  Return status = " + local
        .EabFileHandling.Status;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Open Business Report 2.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "OPEN";
    UseCabBusinessReport5();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail =
        "Error opening Business Report 2.  Return status = " + local
        .EabFileHandling.Status;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Write Business Report 1 header.
    // -------------------------------------------------------------------------------------
    for(local.Common.Count = 1; local.Common.Count <= 6; ++local.Common.Count)
    {
      switch(local.Common.Count)
      {
        case 2:
          local.EabReportSend.RptDetail =
            "Cases NOT in Office 51 and where Parental Rights are NOT terminated.";
            

          break;
        case 4:
          local.EabReportSend.RptDetail =
            "                                                                                State    Family";
            

          break;
        case 5:
          local.EabReportSend.RptDetail =
            "OFF Case       NCP #      NCP Name        Zip  Child #    Child Name    ST CO  Arrears   Arrears  CP #       CP Name       D  Zip";
            

          break;
        case 6:
          local.EabReportSend.RptDetail =
            "--- ---------- ---------- -------------- ----- ---------- ------------- -- -- --------- --------- ---------- ------------- - -----";
            

          break;
        default:
          local.EabReportSend.RptDetail = "";

          break;
      }

      local.EabFileHandling.Action = "WRITE";
      UseCabBusinessReport3();

      if (!Equal(local.EabFileHandling.Status, "OK"))
      {
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail =
          "Error writing Business Report 1 header.  Return status = " + local
          .EabFileHandling.Status;
        UseCabErrorReport2();

        // -- Set Abort exit state and escape...
        ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

        return;
      }
    }

    // -------------------------------------------------------------------------------------
    // --  Write Business Report 2 header.
    // -------------------------------------------------------------------------------------
    for(local.Common.Count = 1; local.Common.Count <= 6; ++local.Common.Count)
    {
      switch(local.Common.Count)
      {
        case 2:
          local.EabReportSend.RptDetail =
            "Cases in Office 51 and/or where Parental Rights are terminated.";

          break;
        case 4:
          local.EabReportSend.RptDetail =
            "                                                                                 State    Family";
            

          break;
        case 5:
          local.EabReportSend.RptDetail =
            "OFF PR Case       NCP #      NCP Name       Zip  Child #    Child Name   ST CO  Arrears   Arrears  CP #       CP Name      D  Zip";
            

          break;
        case 6:
          local.EabReportSend.RptDetail =
            "--- -- ---------- ---------- ------------- ----- ---------- ------------ -- -- --------- --------- ---------- ------------ - -----";
            

          break;
        default:
          local.EabReportSend.RptDetail = "";

          break;
      }

      local.EabFileHandling.Action = "WRITE";
      UseCabBusinessReport6();

      if (!Equal(local.EabFileHandling.Status, "OK"))
      {
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail =
          "Error writing Business Report 2 header.  Return status = " + local
          .EabFileHandling.Status;
        UseCabErrorReport2();

        // -- Set Abort exit state and escape...
        ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

        return;
      }
    }

    UseFnHardcodedDebtDistribution();
    local.Ap.Type1 = "AP";
    local.Ar.Type1 = "AR";
    local.FamilyNcpDocs.Count = 0;
    local.NumberOfCpDocs.Count = 0;
    local.FirstOfMonth.Date =
      AddDays(local.ProgramProcessingInfo.ProcessDate,
      -(Day(local.ProgramProcessingInfo.ProcessDate) - 1));

    foreach(var item in ReadCsePersonCsePersonObligorSupported())
    {
      if (ReadCsePerson2())
      {
        if (Lt(local.Null1.Date, entities.CsePerson.DateOfDeath))
        {
          // -- Skip if NCP is deceased.
          continue;
        }
      }

      if (ReadCsePersonAddress2())
      {
        local.NcpCsePersonAddress.Assign(entities.NcpCsePersonAddress);

        if (AsChar(entities.NcpCsePersonAddress.LocationType) == 'F')
        {
          local.NcpCsePersonAddress.ZipCode = "FADS";

          // -- Skip NCPs with foreign addresses.
          continue;
        }
      }

      if (!entities.NcpCsePersonAddress.Populated)
      {
        // -- Skip if NCP has no verified address
        continue;
      }

      if (ReadCsePerson1())
      {
        if (Lt(local.Null1.Date, entities.CsePerson.DateOfDeath))
        {
          // -- Skip if CH is deceased.
          continue;
        }

        // -- Get child date of birth from adabase
        local.Child2.Number = entities.Ch.Number;
        UseSiReadCsePerson3();

        if (!IsExitState("ACO_NN0000_ALL_OK"))
        {
          UseEabExtractExitStateMessage();
          local.EabFileHandling.Action = "WRITE";
          local.EabReportSend.RptDetail = "Error Reading ADABAS...CH " + entities
            .Ch.Number + " " + local.ExitStateWorkArea.Message;
          UseCabErrorReport2();
          ExitState = "ACO_NN0000_ALL_OK";

          continue;
        }

        if (!Lt(AddYears(local.ProgramProcessingInfo.ProcessDate, -18),
          local.Child2.Dob))
        {
          // -- skip if CH is oder than 18 years of age
          continue;
        }
      }

      // -- Initialize local group
      for(local.Local1.Index = 0; local.Local1.Index < local.Local1.Count; ++
        local.Local1.Index)
      {
        if (!local.Local1.CheckSize())
        {
          break;
        }

        local.Local1.Update.G.CountyAbbreviation = "";
        local.Local1.Update.G.StateAbbreviation = "";
        local.Local1.Update.GlocalStateOwed.TotalCurrency = 0;
        local.Local1.Update.GlocalFamilyOwed.TotalCurrency = 0;
      }

      local.Local1.CheckIndex();
      local.Local1.Count = 0;

      // There must be one or more active arrears debts for the NCP/CH which is 
      // either state owed (AF/FC/NC/NF) or owed to the family (NA/NAI).
      foreach(var item1 in ReadDebtDetailObligationObligationType())
      {
        if (AsChar(entities.ObligationType.Classification) == 'A' && !
          Lt(entities.DebtDetail.DueDt, local.FirstOfMonth.Date))
        {
          // -- Skip this debt.  It is for current support.
          continue;
        }

        UseFnDeterminePgmForDebtDetail();

        switch(TrimEnd(local.Program.Code))
        {
          case "AF":
            break;
          case "FC":
            break;
          case "NC":
            break;
          case "NF":
            break;
          case "NA":
            break;
          case "NAI":
            break;
          default:
            continue;
        }

        if (ReadFips())
        {
          for(local.Local1.Index = 0; local.Local1.Index < local.Local1.Count; ++
            local.Local1.Index)
          {
            if (!local.Local1.CheckSize())
            {
              break;
            }

            if (Equal(local.Local1.Item.G.StateAbbreviation,
              entities.Fips.StateAbbreviation) && Equal
              (local.Local1.Item.G.CountyAbbreviation,
              entities.Fips.CountyAbbreviation))
            {
              if (Equal(local.Program.Code, "NA") || Equal
                (local.Program.Code, "NAI"))
              {
                local.Local1.Update.GlocalFamilyOwed.TotalCurrency =
                  local.Local1.Item.GlocalFamilyOwed.TotalCurrency + entities
                  .DebtDetail.BalanceDueAmt;

                goto Read;
              }

              local.Local1.Update.GlocalStateOwed.TotalCurrency =
                local.Local1.Item.GlocalStateOwed.TotalCurrency + entities
                .DebtDetail.BalanceDueAmt;

              goto Read;
            }
          }

          local.Local1.CheckIndex();

          local.Local1.Index = local.Local1.Count;
          local.Local1.CheckSize();

          MoveFips(entities.Fips, local.Local1.Update.G);

          if (Equal(local.Program.Code, "NA") || Equal
            (local.Program.Code, "NAI"))
          {
            local.Local1.Update.GlocalFamilyOwed.TotalCurrency =
              entities.DebtDetail.BalanceDueAmt;

            goto Read;
          }

          local.Local1.Update.GlocalStateOwed.TotalCurrency =
            entities.DebtDetail.BalanceDueAmt;
        }
        else
        {
          // --  Read FIPS Trib Address for foreign orders...
          if (ReadFipsTribAddress())
          {
            for(local.Local1.Index = 0; local.Local1.Index < local
              .Local1.Count; ++local.Local1.Index)
            {
              if (!local.Local1.CheckSize())
              {
                break;
              }

              if (Equal(local.Local1.Item.G.StateAbbreviation,
                entities.FipsTribAddress.Country) && IsEmpty
                (local.Local1.Item.G.CountyAbbreviation))
              {
                if (Equal(local.Program.Code, "NA") || Equal
                  (local.Program.Code, "NAI"))
                {
                  local.Local1.Update.GlocalFamilyOwed.TotalCurrency =
                    local.Local1.Item.GlocalFamilyOwed.TotalCurrency + entities
                    .DebtDetail.BalanceDueAmt;

                  goto Read;
                }

                local.Local1.Update.GlocalStateOwed.TotalCurrency =
                  local.Local1.Item.GlocalStateOwed.TotalCurrency + entities
                  .DebtDetail.BalanceDueAmt;

                goto Read;
              }
            }

            local.Local1.CheckIndex();

            local.Local1.Index = local.Local1.Count;
            local.Local1.CheckSize();

            local.Local1.Update.G.StateAbbreviation =
              entities.FipsTribAddress.Country ?? Spaces(2);
            local.Local1.Update.G.CountyAbbreviation = "";

            if (Equal(local.Program.Code, "NA") || Equal
              (local.Program.Code, "NAI"))
            {
              local.Local1.Update.GlocalFamilyOwed.TotalCurrency =
                entities.DebtDetail.BalanceDueAmt;

              goto Read;
            }

            local.Local1.Update.GlocalStateOwed.TotalCurrency =
              entities.DebtDetail.BalanceDueAmt;
          }
        }

Read:
        ;
      }

      if (local.Local1.Count == 0)
      {
        // -- Skip the NCP/CH.  There are no state or family owed arrears for 
        // the NCP/CH.
        continue;
      }

      // --   If a case exists with the NCP/CH both currently active that case 
      // will be used
      //      for the 529 letter.
      ReadCaseChild();

      if (entities.Case1.Populated)
      {
      }
      else
      {
        // -- Find case where NCP/CH were previously active....
        // --   If a case exists where the NCP/CH are both active then that case
        // will be used
        //      for the 529 letter.  Otherwise, the case where the NCP/CH were 
        // most
        //      recently active will be used.
        local.Case1.Number = "";
        local.Overlap.Date = local.Null1.Date;
        local.DateWorkArea.Date = local.Null1.Date;

        foreach(var item1 in ReadCaseChildAbsentParent())
        {
          if (Lt(entities.AbsentParent.StartDate, entities.Child.StartDate))
          {
            local.DateWorkArea.Date = entities.Child.StartDate;
          }
          else
          {
            local.DateWorkArea.Date = entities.AbsentParent.StartDate;
          }

          if (Lt(local.Overlap.Date, local.DateWorkArea.Date))
          {
            // -- Use case where AP/Supported combo became active most recently.
            local.Overlap.Date = local.DateWorkArea.Date;
            local.Case1.Number = entities.Case1.Number;
            local.Child1.Assign(entities.Child);
          }
        }

        if (!IsEmpty(local.Case1.Number))
        {
          // -- Reestablish currency on Case and Child.
          if (ReadCase())
          {
            ReadChild();
          }
        }
      }

      if (entities.Case1.Populated)
      {
      }
      else
      {
        // -- Skip NCP/CH since there is no common case.
        continue;
      }

      // -- Find the CP on the case...
      local.CpCsePersonAddress.ZipCode = "";
      local.Deceased.Flag = "";

      if (ReadCsePerson3())
      {
        if (Lt(local.Null1.Date, entities.CpCsePerson.DateOfDeath))
        {
          // -- Flag CP as deceased for the business reports.
          local.Deceased.Flag = "Y";
        }

        // -- Find the CP verified address.
        if (ReadCsePersonAddress1())
        {
          MoveCsePersonAddress(entities.CpCsePersonAddress,
            local.CpCsePersonAddress);

          if (AsChar(entities.CpCsePersonAddress.LocationType) == 'F')
          {
            local.CpCsePersonAddress.ZipCode = "FADS";
          }
        }
      }

      // -- Find Office where case is assigned.
      if (!ReadOffice())
      {
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail =
          "Skipped - Case assignment not found for case " + entities
          .Case1.Number;
        UseCabErrorReport2();

        continue;
      }

      // -- Get NCP name from adabase
      local.NcpCsePersonsWorkSet.Number = entities.NcpCsePerson.Number;
      UseSiReadCsePerson1();

      if (!IsExitState("ACO_NN0000_ALL_OK"))
      {
        UseEabExtractExitStateMessage();
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail = "Error Reading ADABAS...NCP " + entities
          .NcpCsePerson.Number + " " + local.ExitStateWorkArea.Message;
        UseCabErrorReport2();
        ExitState = "ACO_NN0000_ALL_OK";

        continue;
      }

      // -- Get CP name from adabase
      local.CpCsePersonsWorkSet.Number = entities.CpCsePerson.Number;
      UseSiReadCsePerson2();

      if (!IsExitState("ACO_NN0000_ALL_OK"))
      {
        UseEabExtractExitStateMessage();
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail = "Error Reading ADABAS...CP " + entities
          .CpCsePerson.Number + " " + local.ExitStateWorkArea.Message;
        UseCabErrorReport2();
        ExitState = "ACO_NN0000_ALL_OK";

        // -- Continue.  CP letter will error during document printing.
      }

      local.StateOwedArrears.Flag = "N";
      local.Local1.Index = 0;

      for(var limit = local.Local1.Count; local.Local1.Index < limit; ++
        local.Local1.Index)
      {
        if (!local.Local1.CheckSize())
        {
          break;
        }

        if (local.Local1.Item.GlocalStateOwed.TotalCurrency > 0)
        {
          // -- This flag is used to determine which flyer the NCP will receive 
          // (family arrears only or state arrears)
          local.StateOwedArrears.Flag = "Y";
        }

        local.StateOwedAmount.Text10 =
          NumberToString((long)(local.Local1.Item.GlocalStateOwed.
            TotalCurrency * 100), 8, 6) + "." + NumberToString
          ((long)(local.Local1.Item.GlocalStateOwed.TotalCurrency * 100), 14, 2);
          
        local.FamilyOwedAmount.Text10 =
          NumberToString((long)(local.Local1.Item.GlocalFamilyOwed.
            TotalCurrency * 100), 8, 6) + "." + NumberToString
          ((long)(local.Local1.Item.GlocalFamilyOwed.TotalCurrency * 100), 14, 2);
          

        if (entities.Office.SystemGeneratedId == 51 || AsChar
          (entities.Child.FcParentalRights) != 'N' && !
          IsEmpty(entities.Child.FcParentalRights))
        {
          // -- Write to report for Central Office to work manually.
          local.EabReportSend.RptDetail =
            NumberToString(entities.Office.SystemGeneratedId, 13, 3) + "  " + entities
            .Child.FcParentalRights + " " + entities.Case1.Number + " " + entities
            .NcpCsePerson.Number + " " + Substring
            (local.NcpCsePersonsWorkSet.FormattedName,
            CsePersonsWorkSet.FormattedName_MaxLength, 1, 13) + " " + (
              local.NcpCsePersonAddress.ZipCode ?? "") + " " + entities
            .Ch.Number + " " + Substring
            (local.Child2.FormattedName,
            CsePersonsWorkSet.FormattedName_MaxLength, 1, 12) + " " + local
            .Local1.Item.G.StateAbbreviation + " " + (
              local.Local1.Item.G.CountyAbbreviation ?? "") + " " + Substring
            (local.StateOwedAmount.Text10, TextWorkArea.Text10_MaxLength, 1, 9) +
            " " + Substring
            (local.FamilyOwedAmount.Text10, TextWorkArea.Text10_MaxLength, 1, 9) +
            " " + entities.CpCsePerson.Number + " " + Substring
            (local.CpCsePersonsWorkSet.FormattedName,
            CsePersonsWorkSet.FormattedName_MaxLength, 1, 12) + " " + local
            .Deceased.Flag + " " + (local.CpCsePersonAddress.ZipCode ?? "");
          local.EabFileHandling.Action = "WRITE";
          UseCabBusinessReport6();

          if (!Equal(local.EabFileHandling.Status, "OK"))
          {
            local.EabFileHandling.Action = "WRITE";
            local.EabReportSend.RptDetail =
              "Error writing Business Report 2 detail.  Return status = " + local
              .EabFileHandling.Status;
            UseCabErrorReport2();

            // -- Set Abort exit state and escape...
            ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

            goto ReadEach;
          }
        }
        else
        {
          // -- Write to report of combinations for which docs will be 
          // generated.
          local.EabReportSend.RptDetail =
            NumberToString(entities.Office.SystemGeneratedId, 13, 3) + " " + entities
            .Case1.Number + " " + entities.NcpCsePerson.Number + " " + Substring
            (local.NcpCsePersonsWorkSet.FormattedName,
            CsePersonsWorkSet.FormattedName_MaxLength, 1, 14) + " " + (
              local.NcpCsePersonAddress.ZipCode ?? "") + " " + entities
            .Ch.Number + " " + Substring
            (local.Child2.FormattedName,
            CsePersonsWorkSet.FormattedName_MaxLength, 1, 13) + " " + local
            .Local1.Item.G.StateAbbreviation + " " + (
              local.Local1.Item.G.CountyAbbreviation ?? "") + " " + Substring
            (local.StateOwedAmount.Text10, TextWorkArea.Text10_MaxLength, 1, 9) +
            " " + Substring
            (local.FamilyOwedAmount.Text10, TextWorkArea.Text10_MaxLength, 1, 9) +
            " " + entities.CpCsePerson.Number + " " + Substring
            (local.CpCsePersonsWorkSet.FormattedName,
            CsePersonsWorkSet.FormattedName_MaxLength, 1, 13) + " " + local
            .Deceased.Flag + " " + (local.CpCsePersonAddress.ZipCode ?? "");
          local.EabFileHandling.Action = "WRITE";
          UseCabBusinessReport3();

          if (!Equal(local.EabFileHandling.Status, "OK"))
          {
            local.EabFileHandling.Action = "WRITE";
            local.EabReportSend.RptDetail =
              "Error writing Business Report 1 detail.  Return status = " + local
              .EabFileHandling.Status;
            UseCabErrorReport2();

            // -- Set Abort exit state and escape...
            ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

            goto ReadEach;
          }
        }
      }

      local.Local1.CheckIndex();

      if (entities.Office.SystemGeneratedId == 51 || AsChar
        (entities.Child.FcParentalRights) != 'N' && !
        IsEmpty(entities.Child.FcParentalRights))
      {
        // -- Cases in office 51 and cases where parental rights are severed 
        // will be worked manually by central office.
        //    Do not generate letters for these cases.
        continue;
      }

      // -- Write NCP info to the appropriate file for either State or Family 
      // arrears flyer.
      switch(AsChar(local.StateOwedArrears.Flag))
      {
        case 'Y':
          ++local.StateNcpDocs.Count;
          local.FileNumber.Text1 = "1";

          break;
        case 'N':
          ++local.FamilyNcpDocs.Count;
          local.FileNumber.Text1 = "2";

          break;
        default:
          break;
      }

      // --  Concatenate the person number <tab> name <tab> street 1 & 2 <tab> 
      // city state zip zip+4 and view match to the EAB.
      local.NcpFlyer.RptDetail = local.NcpCsePersonsWorkSet.Number;
      local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + "|";
      local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + TrimEnd
        (local.NcpCsePersonsWorkSet.FirstName) + " " + local
        .NcpCsePersonsWorkSet.LastName;
      local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + "|";
      local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + TrimEnd
        (local.NcpCsePersonAddress.Street1) + " " + (
          local.NcpCsePersonAddress.Street2 ?? "");
      local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + "|";

      if (IsEmpty(local.NcpCsePersonAddress.Zip4))
      {
        local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + TrimEnd
          (local.NcpCsePersonAddress.City) + ", " + (
            local.NcpCsePersonAddress.State ?? "") + " " + (
            local.NcpCsePersonAddress.ZipCode ?? "") + " " + (
            local.NcpCsePersonAddress.Zip4 ?? "");
      }
      else
      {
        local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + TrimEnd
          (local.NcpCsePersonAddress.City) + ", " + (
            local.NcpCsePersonAddress.State ?? "") + " " + (
            local.NcpCsePersonAddress.ZipCode ?? "") + "-" + (
            local.NcpCsePersonAddress.Zip4 ?? "");
      }

      local.NcpFlyer.RptDetail = TrimEnd(local.NcpFlyer.RptDetail) + "|";
      local.EabFileHandling.Action = "WRITE";
      UseLeBfx7WriteFile2();

      if (!Equal(local.EabFileHandling.Status, "OK"))
      {
        ExitState = "ACO_RC_AB0008_INVALID_RETURN_CD";

        break;
      }

      if (entities.CpCsePerson.Populated && entities
        .CpCsePersonAddress.Populated)
      {
        if (Lt(local.Null1.Date, entities.CpCsePerson.DateOfDeath) || AsChar
          (entities.CpCsePerson.Type1) != 'C')
        {
          // -- No letter if CP is deceased or an organization.
          goto Test;
        }

        // -- Write CP/CH/CASE combo to the output dataset for the CP letter.
        ++local.NumberOfCpDocs.Count;
        local.FileNumber.Text1 = "3";
        local.EabFileHandling.Action = "WRITE";
        UseLeBfx7WriteFile1();

        if (!Equal(local.EabFileHandling.Status, "OK"))
        {
          ExitState = "ACO_RC_AB0008_INVALID_RETURN_CD";

          break;
        }
      }

Test:
      ;
    }

ReadEach:

    // -------------------------------------------------------------------------------------
    // --  Write Totals to the Control Report.
    // -------------------------------------------------------------------------------------
    for(local.Common.Count = 1; local.Common.Count <= 3; ++local.Common.Count)
    {
      switch(local.Common.Count)
      {
        case 1:
          local.EabReportSend.RptDetail =
            "Number of NCPs Written to the NCP Family Arrears Letter Output File...." +
            NumberToString(local.FamilyNcpDocs.Count, 9, 7);

          break;
        case 2:
          local.EabReportSend.RptDetail =
            "Number of NCPs Written to the NCP State Arrears Letter Output File...." +
            NumberToString(local.StateNcpDocs.Count, 9, 7);

          break;
        case 3:
          local.EabReportSend.RptDetail =
            "Number of CP/CH/CASE Combos Written to the CP Letter Output File......" +
            NumberToString(local.NumberOfCpDocs.Count, 9, 7);

          break;
        default:
          break;
      }

      local.EabFileHandling.Action = "WRITE";
      UseCabControlReport2();

      if (!Equal(local.EabFileHandling.Status, "OK"))
      {
        // -- Write to the error report.
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail =
          "(01) Error Writing Control Report...  Returned Status = " + local
          .EabFileHandling.Status;
        UseCabErrorReport2();

        // -- Set Abort exit state and escape...
        ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

        return;
      }
    }

    // -------------------------------------------------------------------------------------
    // --  Close Business Report 1.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "CLOSE";
    UseCabBusinessReport1();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail =
        "Error closing Business Report 1.  Return status = " + local
        .EabFileHandling.Status;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Close Business Report 2.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "CLOSE";
    UseCabBusinessReport4();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail =
        "Error closing Business Report 2.  Return status = " + local
        .EabFileHandling.Status;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Close the Three Output Files.
    // -------------------------------------------------------------------------------------
    for(local.Common.Count = 1; local.Common.Count <= 3; ++local.Common.Count)
    {
      local.FileNumber.Text1 = NumberToString(local.Common.Count, 15, 1);
      local.EabFileHandling.Action = "CLOSE";
      UseLeBfx7WriteFile3();

      if (!Equal(local.EabFileHandling.Status, "OK"))
      {
        local.EabFileHandling.Action = "WRITE";
        local.EabReportSend.RptDetail =
          "Error closing output file.  Return status = " + local
          .EabFileHandling.Status;
        UseCabErrorReport2();

        // -- Set Abort exit state and escape...
        ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

        return;
      }
    }

    // -------------------------------------------------------------------------------------
    // --  Close the Control Report.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "CLOSE";
    UseCabControlReport1();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      // -- Write to the error report.
      local.EabFileHandling.Action = "WRITE";
      local.EabReportSend.RptDetail =
        "Error Closing Control Report...  Returned Status = " + local
        .EabFileHandling.Status;
      UseCabErrorReport2();

      // -- Set Abort exit state and escape...
      ExitState = "ACO_NN0000_ABEND_FOR_BATCH";

      return;
    }

    // -------------------------------------------------------------------------------------
    // --  Close the Error Report.
    // -------------------------------------------------------------------------------------
    local.EabFileHandling.Action = "CLOSE";
    UseCabErrorReport1();

    if (!Equal(local.EabFileHandling.Status, "OK"))
    {
      ExitState = "SI0000_ERR_CLOSING_ERR_RPT_FILE";

      return;
    }

    ExitState = "ACO_NI0000_PROCESSING_COMPLETE";
  }

  private static void MoveCsePersonAddress(CsePersonAddress source,
    CsePersonAddress target)
  {
    target.LocationType = source.LocationType;
    target.ZipCode = source.ZipCode;
  }

  private static void MoveCsePersonsWorkSet(CsePersonsWorkSet source,
    CsePersonsWorkSet target)
  {
    target.Number = source.Number;
    target.FormattedName = source.FormattedName;
  }

  private static void MoveEabReportSend1(EabReportSend source,
    EabReportSend target)
  {
    target.BlankLineAfterHeading = source.BlankLineAfterHeading;
    target.ProcessDate = source.ProcessDate;
    target.ProgramName = source.ProgramName;
    target.RptHeading3 = source.RptHeading3;
  }

  private static void MoveEabReportSend2(EabReportSend source,
    EabReportSend target)
  {
    target.ProcessDate = source.ProcessDate;
    target.ProgramName = source.ProgramName;
  }

  private static void MoveFips(Fips source, Fips target)
  {
    target.StateAbbreviation = source.StateAbbreviation;
    target.CountyAbbreviation = source.CountyAbbreviation;
  }

  private static void MoveObligationType(ObligationType source,
    ObligationType target)
  {
    target.SystemGeneratedIdentifier = source.SystemGeneratedIdentifier;
    target.Classification = source.Classification;
  }

  private void UseCabBusinessReport1()
  {
    var useImport = new CabBusinessReport01.Import();
    var useExport = new CabBusinessReport01.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;

    Call(CabBusinessReport01.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabBusinessReport2()
  {
    var useImport = new CabBusinessReport01.Import();
    var useExport = new CabBusinessReport01.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    MoveEabReportSend1(local.EabReportSend, useImport.NeededToOpen);

    Call(CabBusinessReport01.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabBusinessReport3()
  {
    var useImport = new CabBusinessReport01.Import();
    var useExport = new CabBusinessReport01.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.NeededToWrite.RptDetail = local.EabReportSend.RptDetail;

    Call(CabBusinessReport01.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabBusinessReport4()
  {
    var useImport = new CabBusinessReport02.Import();
    var useExport = new CabBusinessReport02.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;

    Call(CabBusinessReport02.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabBusinessReport5()
  {
    var useImport = new CabBusinessReport02.Import();
    var useExport = new CabBusinessReport02.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    MoveEabReportSend1(local.EabReportSend, useImport.NeededToOpen);

    Call(CabBusinessReport02.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabBusinessReport6()
  {
    var useImport = new CabBusinessReport02.Import();
    var useExport = new CabBusinessReport02.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.NeededToWrite.RptDetail = local.EabReportSend.RptDetail;

    Call(CabBusinessReport02.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabControlReport1()
  {
    var useImport = new CabControlReport.Import();
    var useExport = new CabControlReport.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;

    Call(CabControlReport.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabControlReport2()
  {
    var useImport = new CabControlReport.Import();
    var useExport = new CabControlReport.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.NeededToWrite.RptDetail = local.EabReportSend.RptDetail;

    Call(CabControlReport.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabControlReport3()
  {
    var useImport = new CabControlReport.Import();
    var useExport = new CabControlReport.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    MoveEabReportSend2(local.EabReportSend, useImport.NeededToOpen);

    Call(CabControlReport.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabErrorReport1()
  {
    var useImport = new CabErrorReport.Import();
    var useExport = new CabErrorReport.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;

    Call(CabErrorReport.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabErrorReport2()
  {
    var useImport = new CabErrorReport.Import();
    var useExport = new CabErrorReport.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.NeededToWrite.RptDetail = local.EabReportSend.RptDetail;

    Call(CabErrorReport.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseCabErrorReport3()
  {
    var useImport = new CabErrorReport.Import();
    var useExport = new CabErrorReport.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    MoveEabReportSend2(local.EabReportSend, useImport.NeededToOpen);

    Call(CabErrorReport.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseEabExtractExitStateMessage()
  {
    var useImport = new EabExtractExitStateMessage.Import();
    var useExport = new EabExtractExitStateMessage.Export();

    useExport.ExitStateWorkArea.Message = local.ExitStateWorkArea.Message;

    Call(EabExtractExitStateMessage.Execute, useImport, useExport);

    local.ExitStateWorkArea.Message = useExport.ExitStateWorkArea.Message;
  }

  private void UseFnDeterminePgmForDebtDetail()
  {
    var useImport = new FnDeterminePgmForDebtDetail.Import();
    var useExport = new FnDeterminePgmForDebtDetail.Export();

    MoveObligationType(entities.ObligationType, useImport.ObligationType);
    useImport.Obligation.OrderTypeCode = entities.Obligation.OrderTypeCode;
    useImport.DebtDetail.Assign(entities.DebtDetail);
    useImport.SupportedPerson.Number = entities.Ch.Number;
    useImport.HardcodedAccruing.Classification =
      local.HardcodedAccruing.Classification;

    Call(FnDeterminePgmForDebtDetail.Execute, useImport, useExport);

    local.DprProgram.ProgramState = useExport.DprProgram.ProgramState;
    local.Program.Code = useExport.Program.Code;
  }

  private void UseFnHardcodedDebtDistribution()
  {
    var useImport = new FnHardcodedDebtDistribution.Import();
    var useExport = new FnHardcodedDebtDistribution.Export();

    Call(FnHardcodedDebtDistribution.Execute, useImport, useExport);

    local.HardcodedAccruing.Classification =
      useExport.OtCAccruingClassification.Classification;
  }

  private void UseLeBfx7WriteFile1()
  {
    var useImport = new LeBfx7WriteFile.Import();
    var useExport = new LeBfx7WriteFile.Export();

    useImport.CsePerson.Number = entities.CpCsePerson.Number;
    useImport.Case1.Number = entities.Case1.Number;
    useImport.Child.Number = entities.Ch.Number;
    useImport.FileNumber.Text1 = local.FileNumber.Text1;
    useImport.CaseRole.Type1 = local.Ar.Type1;
    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useExport.EabFileHandling.Status = local.EabFileHandling.Status;

    Call(LeBfx7WriteFile.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseLeBfx7WriteFile2()
  {
    var useImport = new LeBfx7WriteFile.Import();
    var useExport = new LeBfx7WriteFile.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.FileNumber.Text1 = local.FileNumber.Text1;
    useImport.EabReportSend.RptDetail = local.NcpFlyer.RptDetail;
    useExport.EabFileHandling.Status = local.EabFileHandling.Status;

    Call(LeBfx7WriteFile.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseLeBfx7WriteFile3()
  {
    var useImport = new LeBfx7WriteFile.Import();
    var useExport = new LeBfx7WriteFile.Export();

    useImport.EabFileHandling.Action = local.EabFileHandling.Action;
    useImport.FileNumber.Text1 = local.FileNumber.Text1;
    useExport.EabFileHandling.Status = local.EabFileHandling.Status;

    Call(LeBfx7WriteFile.Execute, useImport, useExport);

    local.EabFileHandling.Status = useExport.EabFileHandling.Status;
  }

  private void UseReadProgramProcessingInfo()
  {
    var useImport = new ReadProgramProcessingInfo.Import();
    var useExport = new ReadProgramProcessingInfo.Export();

    useImport.ProgramProcessingInfo.Name = local.ProgramProcessingInfo.Name;

    Call(ReadProgramProcessingInfo.Execute, useImport, useExport);

    local.ProgramProcessingInfo.Assign(useExport.ProgramProcessingInfo);
  }

  private void UseSiReadCsePerson1()
  {
    var useImport = new SiReadCsePerson.Import();
    var useExport = new SiReadCsePerson.Export();

    useImport.CsePersonsWorkSet.Number = local.NcpCsePersonsWorkSet.Number;

    Call(SiReadCsePerson.Execute, useImport, useExport);

    local.NcpCsePersonsWorkSet.Assign(useExport.CsePersonsWorkSet);
  }

  private void UseSiReadCsePerson2()
  {
    var useImport = new SiReadCsePerson.Import();
    var useExport = new SiReadCsePerson.Export();

    useImport.CsePersonsWorkSet.Number = local.CpCsePersonsWorkSet.Number;

    Call(SiReadCsePerson.Execute, useImport, useExport);

    MoveCsePersonsWorkSet(useExport.CsePersonsWorkSet, local.CpCsePersonsWorkSet);
      
  }

  private void UseSiReadCsePerson3()
  {
    var useImport = new SiReadCsePerson.Import();
    var useExport = new SiReadCsePerson.Export();

    useImport.CsePersonsWorkSet.Number = local.Child2.Number;

    Call(SiReadCsePerson.Execute, useImport, useExport);

    local.Child2.Assign(useExport.CsePersonsWorkSet);
  }

  private bool ReadCase()
  {
    entities.Case1.Populated = false;

    return Read("ReadCase",
      (db, command) =>
      {
        db.SetString(command, "numb", local.Case1.Number);
      },
      (db, reader) =>
      {
        entities.Case1.Number = db.GetString(reader, 0);
        entities.Case1.Populated = true;
      });
  }

  private bool ReadCaseChild()
  {
    entities.Case1.Populated = false;
    entities.Child.Populated = false;

    return Read("ReadCaseChild",
      (db, command) =>
      {
        db.SetString(command, "cspNumber1", entities.Ch.Number);
        db.SetString(command, "cspNumber2", entities.NcpCsePerson.Number);
        db.SetNullableDate(
          command, "startDate",
          local.ProgramProcessingInfo.ProcessDate.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.Case1.Number = db.GetString(reader, 0);
        entities.Child.CasNumber = db.GetString(reader, 0);
        entities.Child.CspNumber = db.GetString(reader, 1);
        entities.Child.Type1 = db.GetString(reader, 2);
        entities.Child.Identifier = db.GetInt32(reader, 3);
        entities.Child.StartDate = db.GetNullableDate(reader, 4);
        entities.Child.EndDate = db.GetNullableDate(reader, 5);
        entities.Child.FcParentalRights = db.GetNullableString(reader, 6);
        entities.Case1.Populated = true;
        entities.Child.Populated = true;
        CheckValid<CaseRole>("Type1", entities.Child.Type1);
      });
  }

  private IEnumerable<bool> ReadCaseChildAbsentParent()
  {
    entities.AbsentParent.Populated = false;
    entities.Case1.Populated = false;
    entities.Child.Populated = false;

    return ReadEach("ReadCaseChildAbsentParent",
      (db, command) =>
      {
        db.SetString(command, "cspNumber1", entities.Ch.Number);
        db.SetString(command, "cspNumber2", entities.NcpCsePerson.Number);
        db.SetNullableDate(
          command, "startDate",
          local.ProgramProcessingInfo.ProcessDate.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.Case1.Number = db.GetString(reader, 0);
        entities.Child.CasNumber = db.GetString(reader, 0);
        entities.Child.CspNumber = db.GetString(reader, 1);
        entities.Child.Type1 = db.GetString(reader, 2);
        entities.Child.Identifier = db.GetInt32(reader, 3);
        entities.Child.StartDate = db.GetNullableDate(reader, 4);
        entities.Child.EndDate = db.GetNullableDate(reader, 5);
        entities.Child.FcParentalRights = db.GetNullableString(reader, 6);
        entities.AbsentParent.CasNumber = db.GetString(reader, 7);
        entities.AbsentParent.CspNumber = db.GetString(reader, 8);
        entities.AbsentParent.Type1 = db.GetString(reader, 9);
        entities.AbsentParent.Identifier = db.GetInt32(reader, 10);
        entities.AbsentParent.StartDate = db.GetNullableDate(reader, 11);
        entities.AbsentParent.EndDate = db.GetNullableDate(reader, 12);
        entities.AbsentParent.Populated = true;
        entities.Case1.Populated = true;
        entities.Child.Populated = true;
        CheckValid<CaseRole>("Type1", entities.Child.Type1);
        CheckValid<CaseRole>("Type1", entities.AbsentParent.Type1);

        return true;
      });
  }

  private bool ReadChild()
  {
    entities.Child.Populated = false;

    return Read("ReadChild",
      (db, command) =>
      {
        db.SetString(command, "casNumber", entities.Case1.Number);
        db.SetString(command, "cspNumber", entities.Ch.Number);
        db.SetString(command, "type", local.Child1.Type1);
        db.SetInt32(command, "caseRoleId", local.Child1.Identifier);
      },
      (db, reader) =>
      {
        entities.Child.CasNumber = db.GetString(reader, 0);
        entities.Child.CspNumber = db.GetString(reader, 1);
        entities.Child.Type1 = db.GetString(reader, 2);
        entities.Child.Identifier = db.GetInt32(reader, 3);
        entities.Child.StartDate = db.GetNullableDate(reader, 4);
        entities.Child.EndDate = db.GetNullableDate(reader, 5);
        entities.Child.FcParentalRights = db.GetNullableString(reader, 6);
        entities.Child.Populated = true;
        CheckValid<CaseRole>("Type1", entities.Child.Type1);
      });
  }

  private bool ReadCsePerson1()
  {
    entities.CsePerson.Populated = false;

    return Read("ReadCsePerson1",
      (db, command) =>
      {
        db.SetString(command, "numb", entities.Ch.Number);
      },
      (db, reader) =>
      {
        entities.CsePerson.Number = db.GetString(reader, 0);
        entities.CsePerson.Type1 = db.GetString(reader, 1);
        entities.CsePerson.DateOfDeath = db.GetNullableDate(reader, 2);
        entities.CsePerson.Populated = true;
        CheckValid<CsePerson>("Type1", entities.CsePerson.Type1);
      });
  }

  private bool ReadCsePerson2()
  {
    entities.CsePerson.Populated = false;

    return Read("ReadCsePerson2",
      (db, command) =>
      {
        db.SetString(command, "numb", entities.NcpCsePerson.Number);
      },
      (db, reader) =>
      {
        entities.CsePerson.Number = db.GetString(reader, 0);
        entities.CsePerson.Type1 = db.GetString(reader, 1);
        entities.CsePerson.DateOfDeath = db.GetNullableDate(reader, 2);
        entities.CsePerson.Populated = true;
        CheckValid<CsePerson>("Type1", entities.CsePerson.Type1);
      });
  }

  private bool ReadCsePerson3()
  {
    entities.CpCsePerson.Populated = false;

    return Read("ReadCsePerson3",
      (db, command) =>
      {
        db.SetString(command, "casNumber", entities.Case1.Number);
        db.SetString(command, "type", local.Ar.Type1);
        db.SetNullableDate(
          command, "startDate",
          local.ProgramProcessingInfo.ProcessDate.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.CpCsePerson.Number = db.GetString(reader, 0);
        entities.CpCsePerson.Type1 = db.GetString(reader, 1);
        entities.CpCsePerson.DateOfDeath = db.GetNullableDate(reader, 2);
        entities.CpCsePerson.OrganizationName = db.GetNullableString(reader, 3);
        entities.CpCsePerson.Populated = true;
        CheckValid<CsePerson>("Type1", entities.CpCsePerson.Type1);
      });
  }

  private bool ReadCsePersonAddress1()
  {
    entities.CpCsePersonAddress.Populated = false;

    return Read("ReadCsePersonAddress1",
      (db, command) =>
      {
        db.SetString(command, "cspNumber", entities.CpCsePerson.Number);
        db.SetNullableDate(
          command, "verifiedDate", local.Null1.Date.GetValueOrDefault());
        db.SetNullableDate(
          command, "endDate",
          local.ProgramProcessingInfo.ProcessDate.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.CpCsePersonAddress.Identifier = db.GetDateTime(reader, 0);
        entities.CpCsePersonAddress.CspNumber = db.GetString(reader, 1);
        entities.CpCsePersonAddress.VerifiedDate =
          db.GetNullableDate(reader, 2);
        entities.CpCsePersonAddress.EndDate = db.GetNullableDate(reader, 3);
        entities.CpCsePersonAddress.ZipCode = db.GetNullableString(reader, 4);
        entities.CpCsePersonAddress.LocationType = db.GetString(reader, 5);
        entities.CpCsePersonAddress.Populated = true;
        CheckValid<CsePersonAddress>("LocationType",
          entities.CpCsePersonAddress.LocationType);
      });
  }

  private bool ReadCsePersonAddress2()
  {
    entities.NcpCsePersonAddress.Populated = false;

    return Read("ReadCsePersonAddress2",
      (db, command) =>
      {
        db.SetString(command, "cspNumber", entities.NcpCsePerson.Number);
        db.SetNullableDate(
          command, "verifiedDate", local.Null1.Date.GetValueOrDefault());
        db.SetNullableDate(
          command, "endDate",
          local.ProgramProcessingInfo.ProcessDate.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.NcpCsePersonAddress.Identifier = db.GetDateTime(reader, 0);
        entities.NcpCsePersonAddress.CspNumber = db.GetString(reader, 1);
        entities.NcpCsePersonAddress.Street1 = db.GetNullableString(reader, 2);
        entities.NcpCsePersonAddress.Street2 = db.GetNullableString(reader, 3);
        entities.NcpCsePersonAddress.City = db.GetNullableString(reader, 4);
        entities.NcpCsePersonAddress.VerifiedDate =
          db.GetNullableDate(reader, 5);
        entities.NcpCsePersonAddress.EndDate = db.GetNullableDate(reader, 6);
        entities.NcpCsePersonAddress.State = db.GetNullableString(reader, 7);
        entities.NcpCsePersonAddress.ZipCode = db.GetNullableString(reader, 8);
        entities.NcpCsePersonAddress.Zip4 = db.GetNullableString(reader, 9);
        entities.NcpCsePersonAddress.LocationType = db.GetString(reader, 10);
        entities.NcpCsePersonAddress.Populated = true;
        CheckValid<CsePersonAddress>("LocationType",
          entities.NcpCsePersonAddress.LocationType);
      });
  }

  private IEnumerable<bool> ReadCsePersonCsePersonObligorSupported()
  {
    entities.Supported.Populated = false;
    entities.Obligor.Populated = false;
    entities.NcpCsePerson.Populated = false;
    entities.Ch.Populated = false;

    return ReadEach("ReadCsePersonCsePersonObligorSupported",
      null,
      (db, reader) =>
      {
        entities.NcpCsePerson.Number = db.GetString(reader, 0);
        entities.Ch.Number = db.GetString(reader, 1);
        entities.Supported.CspNumber = db.GetString(reader, 1);
        entities.Obligor.CspNumber = db.GetString(reader, 2);
        entities.Obligor.Type1 = db.GetString(reader, 3);
        entities.Supported.Type1 = db.GetString(reader, 4);
        entities.Supported.Populated = true;
        entities.Obligor.Populated = true;
        entities.NcpCsePerson.Populated = true;
        entities.Ch.Populated = true;
        CheckValid<CsePersonAccount>("Type1", entities.Obligor.Type1);
        CheckValid<CsePersonAccount>("Type1", entities.Supported.Type1);

        return true;
      });
  }

  private IEnumerable<bool> ReadDebtDetailObligationObligationType()
  {
    System.Diagnostics.Debug.Assert(entities.Supported.Populated);
    System.Diagnostics.Debug.Assert(entities.Obligor.Populated);
    entities.ObligationType.Populated = false;
    entities.Obligation.Populated = false;
    entities.DebtDetail.Populated = false;

    return ReadEach("ReadDebtDetailObligationObligationType",
      (db, command) =>
      {
        db.SetNullableString(command, "cpaSupType", entities.Supported.Type1);
        db.SetNullableString(
          command, "cspSupNumber", entities.Supported.CspNumber);
        db.SetString(command, "cpaType", entities.Obligor.Type1);
        db.SetString(command, "cspNumber", entities.Obligor.CspNumber);
      },
      (db, reader) =>
      {
        entities.DebtDetail.ObgGeneratedId = db.GetInt32(reader, 0);
        entities.DebtDetail.CspNumber = db.GetString(reader, 1);
        entities.DebtDetail.CpaType = db.GetString(reader, 2);
        entities.DebtDetail.OtrGeneratedId = db.GetInt32(reader, 3);
        entities.DebtDetail.OtyType = db.GetInt32(reader, 4);
        entities.DebtDetail.OtrType = db.GetString(reader, 5);
        entities.DebtDetail.DueDt = db.GetDate(reader, 6);
        entities.DebtDetail.BalanceDueAmt = db.GetDecimal(reader, 7);
        entities.DebtDetail.CoveredPrdStartDt = db.GetNullableDate(reader, 8);
        entities.DebtDetail.CoveredPrdEndDt = db.GetNullableDate(reader, 9);
        entities.DebtDetail.PreconversionProgramCode =
          db.GetNullableString(reader, 10);
        entities.Obligation.CpaType = db.GetString(reader, 11);
        entities.Obligation.CspNumber = db.GetString(reader, 12);
        entities.Obligation.SystemGeneratedIdentifier = db.GetInt32(reader, 13);
        entities.Obligation.DtyGeneratedId = db.GetInt32(reader, 14);
        entities.ObligationType.SystemGeneratedIdentifier =
          db.GetInt32(reader, 14);
        entities.Obligation.LgaId = db.GetNullableInt32(reader, 15);
        entities.Obligation.OrderTypeCode = db.GetString(reader, 16);
        entities.ObligationType.Code = db.GetString(reader, 17);
        entities.ObligationType.Classification = db.GetString(reader, 18);
        entities.ObligationType.Populated = true;
        entities.Obligation.Populated = true;
        entities.DebtDetail.Populated = true;
        CheckValid<DebtDetail>("CpaType", entities.DebtDetail.CpaType);
        CheckValid<DebtDetail>("OtrType", entities.DebtDetail.OtrType);
        CheckValid<Obligation>("CpaType", entities.Obligation.CpaType);
        CheckValid<Obligation>("OrderTypeCode",
          entities.Obligation.OrderTypeCode);
        CheckValid<ObligationType>("Classification",
          entities.ObligationType.Classification);

        return true;
      });
  }

  private bool ReadFips()
  {
    System.Diagnostics.Debug.Assert(entities.Obligation.Populated);
    entities.Fips.Populated = false;

    return Read("ReadFips",
      (db, command) =>
      {
        db.SetInt32(
          command, "legalActionId",
          entities.Obligation.LgaId.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.Fips.State = db.GetInt32(reader, 0);
        entities.Fips.County = db.GetInt32(reader, 1);
        entities.Fips.Location = db.GetInt32(reader, 2);
        entities.Fips.StateAbbreviation = db.GetString(reader, 3);
        entities.Fips.CountyAbbreviation = db.GetNullableString(reader, 4);
        entities.Fips.Populated = true;
      });
  }

  private bool ReadFipsTribAddress()
  {
    System.Diagnostics.Debug.Assert(entities.Obligation.Populated);
    entities.FipsTribAddress.Populated = false;

    return Read("ReadFipsTribAddress",
      (db, command) =>
      {
        db.SetInt32(
          command, "legalActionId",
          entities.Obligation.LgaId.GetValueOrDefault());
      },
      (db, reader) =>
      {
        entities.FipsTribAddress.Identifier = db.GetInt32(reader, 0);
        entities.FipsTribAddress.Country = db.GetNullableString(reader, 1);
        entities.FipsTribAddress.TrbId = db.GetNullableInt32(reader, 2);
        entities.FipsTribAddress.Populated = true;
      });
  }

  private bool ReadOffice()
  {
    entities.Office.Populated = false;

    return Read("ReadOffice",
      (db, command) =>
      {
        db.SetDate(
          command, "effectiveDate",
          local.ProgramProcessingInfo.ProcessDate.GetValueOrDefault());
        db.SetString(command, "casNo", entities.Case1.Number);
      },
      (db, reader) =>
      {
        entities.Office.SystemGeneratedId = db.GetInt32(reader, 0);
        entities.Office.OffOffice = db.GetNullableInt32(reader, 1);
        entities.Office.Populated = true;
      });
  }
#endregion

#region Parameters.
  protected readonly Import import;
  protected readonly Export export;
  protected readonly Local local = new();
  protected readonly Entities entities = new();
#endregion

#region Structures
  /// <summary>
  /// This class defines import view.
  /// </summary>
  [Serializable]
  public class Import
  {
  }

  /// <summary>
  /// This class defines export view.
  /// </summary>
  [Serializable]
  public class Export
  {
  }

  /// <summary>
  /// This class defines local view.
  /// </summary>
  [Serializable]
  public class Local
  {
    /// <summary>A LocalGroup group.</summary>
    [Serializable]
    public class LocalGroup
    {
      /// <summary>
      /// A value of G.
      /// </summary>
      [JsonPropertyName("g")]
      public Fips G
      {
        get => g ??= new();
        set => g = value;
      }

      /// <summary>
      /// A value of GlocalStateOwed.
      /// </summary>
      [JsonPropertyName("glocalStateOwed")]
      public Common GlocalStateOwed
      {
        get => glocalStateOwed ??= new();
        set => glocalStateOwed = value;
      }

      /// <summary>
      /// A value of GlocalFamilyOwed.
      /// </summary>
      [JsonPropertyName("glocalFamilyOwed")]
      public Common GlocalFamilyOwed
      {
        get => glocalFamilyOwed ??= new();
        set => glocalFamilyOwed = value;
      }

      /// <summary>A collection capacity.</summary>
      public const int Capacity = 100;

      private Fips g;
      private Common glocalStateOwed;
      private Common glocalFamilyOwed;
    }

    /// <summary>
    /// A value of NcpFlyer.
    /// </summary>
    [JsonPropertyName("ncpFlyer")]
    public EabReportSend NcpFlyer
    {
      get => ncpFlyer ??= new();
      set => ncpFlyer = value;
    }

    /// <summary>
    /// A value of StateNcpDocs.
    /// </summary>
    [JsonPropertyName("stateNcpDocs")]
    public Common StateNcpDocs
    {
      get => stateNcpDocs ??= new();
      set => stateNcpDocs = value;
    }

    /// <summary>
    /// A value of StateOwedArrears.
    /// </summary>
    [JsonPropertyName("stateOwedArrears")]
    public Common StateOwedArrears
    {
      get => stateOwedArrears ??= new();
      set => stateOwedArrears = value;
    }

    /// <summary>
    /// A value of FamilyOwedAmount.
    /// </summary>
    [JsonPropertyName("familyOwedAmount")]
    public TextWorkArea FamilyOwedAmount
    {
      get => familyOwedAmount ??= new();
      set => familyOwedAmount = value;
    }

    /// <summary>
    /// A value of FileNumber.
    /// </summary>
    [JsonPropertyName("fileNumber")]
    public TextWorkArea FileNumber
    {
      get => fileNumber ??= new();
      set => fileNumber = value;
    }

    /// <summary>
    /// A value of Deceased.
    /// </summary>
    [JsonPropertyName("deceased")]
    public Common Deceased
    {
      get => deceased ??= new();
      set => deceased = value;
    }

    /// <summary>
    /// A value of StateOwedAmount.
    /// </summary>
    [JsonPropertyName("stateOwedAmount")]
    public TextWorkArea StateOwedAmount
    {
      get => stateOwedAmount ??= new();
      set => stateOwedAmount = value;
    }

    /// <summary>
    /// A value of NcpCsePersonsWorkSet.
    /// </summary>
    [JsonPropertyName("ncpCsePersonsWorkSet")]
    public CsePersonsWorkSet NcpCsePersonsWorkSet
    {
      get => ncpCsePersonsWorkSet ??= new();
      set => ncpCsePersonsWorkSet = value;
    }

    /// <summary>
    /// A value of CpCsePersonsWorkSet.
    /// </summary>
    [JsonPropertyName("cpCsePersonsWorkSet")]
    public CsePersonsWorkSet CpCsePersonsWorkSet
    {
      get => cpCsePersonsWorkSet ??= new();
      set => cpCsePersonsWorkSet = value;
    }

    /// <summary>
    /// A value of Child1.
    /// </summary>
    [JsonPropertyName("child1")]
    public CaseRole Child1
    {
      get => child1 ??= new();
      set => child1 = value;
    }

    /// <summary>
    /// A value of CpCsePersonAddress.
    /// </summary>
    [JsonPropertyName("cpCsePersonAddress")]
    public CsePersonAddress CpCsePersonAddress
    {
      get => cpCsePersonAddress ??= new();
      set => cpCsePersonAddress = value;
    }

    /// <summary>
    /// A value of NcpCsePersonAddress.
    /// </summary>
    [JsonPropertyName("ncpCsePersonAddress")]
    public CsePersonAddress NcpCsePersonAddress
    {
      get => ncpCsePersonAddress ??= new();
      set => ncpCsePersonAddress = value;
    }

    /// <summary>
    /// Gets a value of Local1.
    /// </summary>
    [JsonIgnore]
    public Array<LocalGroup> Local1 => local1 ??= new(LocalGroup.Capacity, 0);

    /// <summary>
    /// Gets a value of Local1 for json serialization.
    /// </summary>
    [JsonPropertyName("local1")]
    [Computed]
    public IList<LocalGroup> Local1_Json
    {
      get => local1;
      set => Local1.Assign(value);
    }

    /// <summary>
    /// A value of Ap.
    /// </summary>
    [JsonPropertyName("ap")]
    public CaseRole Ap
    {
      get => ap ??= new();
      set => ap = value;
    }

    /// <summary>
    /// A value of Ar.
    /// </summary>
    [JsonPropertyName("ar")]
    public CaseRole Ar
    {
      get => ar ??= new();
      set => ar = value;
    }

    /// <summary>
    /// A value of Null1.
    /// </summary>
    [JsonPropertyName("null1")]
    public DateWorkArea Null1
    {
      get => null1 ??= new();
      set => null1 = value;
    }

    /// <summary>
    /// A value of Case1.
    /// </summary>
    [JsonPropertyName("case1")]
    public Case1 Case1
    {
      get => case1 ??= new();
      set => case1 = value;
    }

    /// <summary>
    /// A value of DateWorkArea.
    /// </summary>
    [JsonPropertyName("dateWorkArea")]
    public DateWorkArea DateWorkArea
    {
      get => dateWorkArea ??= new();
      set => dateWorkArea = value;
    }

    /// <summary>
    /// A value of Overlap.
    /// </summary>
    [JsonPropertyName("overlap")]
    public DateWorkArea Overlap
    {
      get => overlap ??= new();
      set => overlap = value;
    }

    /// <summary>
    /// A value of HardcodedAccruing.
    /// </summary>
    [JsonPropertyName("hardcodedAccruing")]
    public ObligationType HardcodedAccruing
    {
      get => hardcodedAccruing ??= new();
      set => hardcodedAccruing = value;
    }

    /// <summary>
    /// A value of Child2.
    /// </summary>
    [JsonPropertyName("child2")]
    public CsePersonsWorkSet Child2
    {
      get => child2 ??= new();
      set => child2 = value;
    }

    /// <summary>
    /// A value of FirstOfMonth.
    /// </summary>
    [JsonPropertyName("firstOfMonth")]
    public DateWorkArea FirstOfMonth
    {
      get => firstOfMonth ??= new();
      set => firstOfMonth = value;
    }

    /// <summary>
    /// A value of DprProgram.
    /// </summary>
    [JsonPropertyName("dprProgram")]
    public DprProgram DprProgram
    {
      get => dprProgram ??= new();
      set => dprProgram = value;
    }

    /// <summary>
    /// A value of Program.
    /// </summary>
    [JsonPropertyName("program")]
    public Program Program
    {
      get => program ??= new();
      set => program = value;
    }

    /// <summary>
    /// A value of Common.
    /// </summary>
    [JsonPropertyName("common")]
    public Common Common
    {
      get => common ??= new();
      set => common = value;
    }

    /// <summary>
    /// A value of ProgramProcessingInfo.
    /// </summary>
    [JsonPropertyName("programProcessingInfo")]
    public ProgramProcessingInfo ProgramProcessingInfo
    {
      get => programProcessingInfo ??= new();
      set => programProcessingInfo = value;
    }

    /// <summary>
    /// A value of EabFileHandling.
    /// </summary>
    [JsonPropertyName("eabFileHandling")]
    public EabFileHandling EabFileHandling
    {
      get => eabFileHandling ??= new();
      set => eabFileHandling = value;
    }

    /// <summary>
    /// A value of EabReportSend.
    /// </summary>
    [JsonPropertyName("eabReportSend")]
    public EabReportSend EabReportSend
    {
      get => eabReportSend ??= new();
      set => eabReportSend = value;
    }

    /// <summary>
    /// A value of ExitStateWorkArea.
    /// </summary>
    [JsonPropertyName("exitStateWorkArea")]
    public ExitStateWorkArea ExitStateWorkArea
    {
      get => exitStateWorkArea ??= new();
      set => exitStateWorkArea = value;
    }

    /// <summary>
    /// A value of FamilyNcpDocs.
    /// </summary>
    [JsonPropertyName("familyNcpDocs")]
    public Common FamilyNcpDocs
    {
      get => familyNcpDocs ??= new();
      set => familyNcpDocs = value;
    }

    /// <summary>
    /// A value of NumberOfCpDocs.
    /// </summary>
    [JsonPropertyName("numberOfCpDocs")]
    public Common NumberOfCpDocs
    {
      get => numberOfCpDocs ??= new();
      set => numberOfCpDocs = value;
    }

    private EabReportSend ncpFlyer;
    private Common stateNcpDocs;
    private Common stateOwedArrears;
    private TextWorkArea familyOwedAmount;
    private TextWorkArea fileNumber;
    private Common deceased;
    private TextWorkArea stateOwedAmount;
    private CsePersonsWorkSet ncpCsePersonsWorkSet;
    private CsePersonsWorkSet cpCsePersonsWorkSet;
    private CaseRole child1;
    private CsePersonAddress cpCsePersonAddress;
    private CsePersonAddress ncpCsePersonAddress;
    private Array<LocalGroup> local1;
    private CaseRole ap;
    private CaseRole ar;
    private DateWorkArea null1;
    private Case1 case1;
    private DateWorkArea dateWorkArea;
    private DateWorkArea overlap;
    private ObligationType hardcodedAccruing;
    private CsePersonsWorkSet child2;
    private DateWorkArea firstOfMonth;
    private DprProgram dprProgram;
    private Program program;
    private Common common;
    private ProgramProcessingInfo programProcessingInfo;
    private EabFileHandling eabFileHandling;
    private EabReportSend eabReportSend;
    private ExitStateWorkArea exitStateWorkArea;
    private Common familyNcpDocs;
    private Common numberOfCpDocs;
  }

  /// <summary>
  /// This class defines entity view.
  /// </summary>
  [Serializable]
  public class Entities
  {
    /// <summary>
    /// A value of FipsTribAddress.
    /// </summary>
    [JsonPropertyName("fipsTribAddress")]
    public FipsTribAddress FipsTribAddress
    {
      get => fipsTribAddress ??= new();
      set => fipsTribAddress = value;
    }

    /// <summary>
    /// A value of CpCsePersonAddress.
    /// </summary>
    [JsonPropertyName("cpCsePersonAddress")]
    public CsePersonAddress CpCsePersonAddress
    {
      get => cpCsePersonAddress ??= new();
      set => cpCsePersonAddress = value;
    }

    /// <summary>
    /// A value of CpCsePerson.
    /// </summary>
    [JsonPropertyName("cpCsePerson")]
    public CsePerson CpCsePerson
    {
      get => cpCsePerson ??= new();
      set => cpCsePerson = value;
    }

    /// <summary>
    /// A value of ApplicantRecipient.
    /// </summary>
    [JsonPropertyName("applicantRecipient")]
    public CaseRole ApplicantRecipient
    {
      get => applicantRecipient ??= new();
      set => applicantRecipient = value;
    }

    /// <summary>
    /// A value of NcpCsePersonAddress.
    /// </summary>
    [JsonPropertyName("ncpCsePersonAddress")]
    public CsePersonAddress NcpCsePersonAddress
    {
      get => ncpCsePersonAddress ??= new();
      set => ncpCsePersonAddress = value;
    }

    /// <summary>
    /// A value of Fips.
    /// </summary>
    [JsonPropertyName("fips")]
    public Fips Fips
    {
      get => fips ??= new();
      set => fips = value;
    }

    /// <summary>
    /// A value of Tribunal.
    /// </summary>
    [JsonPropertyName("tribunal")]
    public Tribunal Tribunal
    {
      get => tribunal ??= new();
      set => tribunal = value;
    }

    /// <summary>
    /// A value of LegalAction.
    /// </summary>
    [JsonPropertyName("legalAction")]
    public LegalAction LegalAction
    {
      get => legalAction ??= new();
      set => legalAction = value;
    }

    /// <summary>
    /// A value of CsePerson.
    /// </summary>
    [JsonPropertyName("csePerson")]
    public CsePerson CsePerson
    {
      get => csePerson ??= new();
      set => csePerson = value;
    }

    /// <summary>
    /// A value of Other.
    /// </summary>
    [JsonPropertyName("other")]
    public CsePersonAccount Other
    {
      get => other ??= new();
      set => other = value;
    }

    /// <summary>
    /// A value of OtherCh.
    /// </summary>
    [JsonPropertyName("otherCh")]
    public CsePerson OtherCh
    {
      get => otherCh ??= new();
      set => otherCh = value;
    }

    /// <summary>
    /// A value of AbsentParent.
    /// </summary>
    [JsonPropertyName("absentParent")]
    public CaseRole AbsentParent
    {
      get => absentParent ??= new();
      set => absentParent = value;
    }

    /// <summary>
    /// A value of OfficeServiceProvider.
    /// </summary>
    [JsonPropertyName("officeServiceProvider")]
    public OfficeServiceProvider OfficeServiceProvider
    {
      get => officeServiceProvider ??= new();
      set => officeServiceProvider = value;
    }

    /// <summary>
    /// A value of CaseAssignment.
    /// </summary>
    [JsonPropertyName("caseAssignment")]
    public CaseAssignment CaseAssignment
    {
      get => caseAssignment ??= new();
      set => caseAssignment = value;
    }

    /// <summary>
    /// A value of Case1.
    /// </summary>
    [JsonPropertyName("case1")]
    public Case1 Case1
    {
      get => case1 ??= new();
      set => case1 = value;
    }

    /// <summary>
    /// A value of Child.
    /// </summary>
    [JsonPropertyName("child")]
    public CaseRole Child
    {
      get => child ??= new();
      set => child = value;
    }

    /// <summary>
    /// A value of ObligationType.
    /// </summary>
    [JsonPropertyName("obligationType")]
    public ObligationType ObligationType
    {
      get => obligationType ??= new();
      set => obligationType = value;
    }

    /// <summary>
    /// A value of Obligation.
    /// </summary>
    [JsonPropertyName("obligation")]
    public Obligation Obligation
    {
      get => obligation ??= new();
      set => obligation = value;
    }

    /// <summary>
    /// A value of Supported.
    /// </summary>
    [JsonPropertyName("supported")]
    public CsePersonAccount Supported
    {
      get => supported ??= new();
      set => supported = value;
    }

    /// <summary>
    /// A value of Obligor.
    /// </summary>
    [JsonPropertyName("obligor")]
    public CsePersonAccount Obligor
    {
      get => obligor ??= new();
      set => obligor = value;
    }

    /// <summary>
    /// A value of ObligationTransaction.
    /// </summary>
    [JsonPropertyName("obligationTransaction")]
    public ObligationTransaction ObligationTransaction
    {
      get => obligationTransaction ??= new();
      set => obligationTransaction = value;
    }

    /// <summary>
    /// A value of DebtDetail.
    /// </summary>
    [JsonPropertyName("debtDetail")]
    public DebtDetail DebtDetail
    {
      get => debtDetail ??= new();
      set => debtDetail = value;
    }

    /// <summary>
    /// A value of NcpCsePerson.
    /// </summary>
    [JsonPropertyName("ncpCsePerson")]
    public CsePerson NcpCsePerson
    {
      get => ncpCsePerson ??= new();
      set => ncpCsePerson = value;
    }

    /// <summary>
    /// A value of Ch.
    /// </summary>
    [JsonPropertyName("ch")]
    public CsePerson Ch
    {
      get => ch ??= new();
      set => ch = value;
    }

    /// <summary>
    /// A value of Office.
    /// </summary>
    [JsonPropertyName("office")]
    public Office Office
    {
      get => office ??= new();
      set => office = value;
    }

    private FipsTribAddress fipsTribAddress;
    private CsePersonAddress cpCsePersonAddress;
    private CsePerson cpCsePerson;
    private CaseRole applicantRecipient;
    private CsePersonAddress ncpCsePersonAddress;
    private Fips fips;
    private Tribunal tribunal;
    private LegalAction legalAction;
    private CsePerson csePerson;
    private CsePersonAccount other;
    private CsePerson otherCh;
    private CaseRole absentParent;
    private OfficeServiceProvider officeServiceProvider;
    private CaseAssignment caseAssignment;
    private Case1 case1;
    private CaseRole child;
    private ObligationType obligationType;
    private Obligation obligation;
    private CsePersonAccount supported;
    private CsePersonAccount obligor;
    private ObligationTransaction obligationTransaction;
    private DebtDetail debtDetail;
    private CsePerson ncpCsePerson;
    private CsePerson ch;
    private Office office;
  }
#endregion
}
