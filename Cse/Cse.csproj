<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <EnableUnsafeBinaryFormatterSerialization>true</EnableUnsafeBinaryFormatterSerialization>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
	<NgRoot>..\..\bphx.cool.angular\</NgRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <Version>1.0.1</Version>
    <UserSecretsId>002c74d4-30a4-4e01-8e6d-59852f0433a5</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="6.0.1" />
    <PackageReference Include="Microsoft.Extensions.Options" Version="6.0.0" />
    <PackageReference Include="Microsoft.Identity.Web" Version="1.24.1" />
    <PackageReference Include="Microsoft.TypeScript.MSBuild" Version="4.5.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.15.1" />
    <PackageReference Include="System.Data.SqlClient" Version="4.8.3" />
    <PackageReference Include="Unity" Version="5.11.10" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <Content Remove="obj\**" />
    <None Remove="$(SpaRoot)**" />
    <None Remove="obj\**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <Compile Remove="obj\**" />
    <EmbeddedResource Remove="obj\**" />
    <TypeScriptCompile Remove="obj\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Bphx.Cool.Net\Bphx.Cool.Core\Bphx.Cool.Core.csproj" />
    <ProjectReference Include="..\..\Bphx.Cool.Net\Bphx.Cool.Log\Bphx.Cool.Log.csproj" />
    <ProjectReference Include="..\..\kansasdcf-gen-code\GOV.KS.DCF.CSS.Common.BL\GOV.KS.DCF.CSS.Common.BL.csproj" />
	<ProjectReference Include="..\..\kansasdcf-gen-code\GOV.KS.DCF.CSS.Batch.BL\GOV.KS.DCF.CSS.Batch.BL.csproj" />
    <ProjectReference Include="..\Core\Core.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Update="InjectionTypeReg.xml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <!--<Exec WorkingDirectory="$(SpaRoot)" Command="refresh.bat" />-->
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
	<Exec WorkingDirectory="$(NgRoot)" Command="npm install" />
	<Exec WorkingDirectory="$(NgRoot)" Command="npm run build -c=production" />
	<Exec WorkingDirectory="$(NgRoot)dist\bphx-cool" Command="npm link" />
	<Exec WorkingDirectory="$(SpaRoot)" Command="npm link @adv-appmod/bphx-cool" />
	<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	<!--<Exec WorkingDirectory="$(SpaRoot)" Command="ng build prod" />-->
	<!--<Exec WorkingDirectory="$(SpaRoot)" Command="refresh.bat" />-->
	<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -c=production" />
    <!--<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr - - -c=production" Condition=" '$(BuildServerSideRenderer)' == 'true' " />-->

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
